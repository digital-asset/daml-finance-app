-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Util.Workflow where

import DA.List (head)
import DA.Map qualified as M
import DA.Set (Set, singleton)
import Daml.Finance.App.Custody.Service qualified as Custody (Deposit(..), RequestDeposit(..), Service)
import Daml.Finance.App.Distribution.Bidding.Model qualified as Bidding (Bid)
import Daml.Finance.App.Distribution.Bidding.Service qualified as Bidding (CreateBid(..), RequestCreateBid(..), S)
import Daml.Finance.App.Distribution.Auction.Model qualified as Auction (T)
import Daml.Finance.App.Distribution.Auction.Service qualified as Auction (CreateAuction(..), ProcessAuction(..), RequestCreateAuction(..), S)
import Daml.Finance.App.Issuance.Model qualified as Issuance (T)
import Daml.Finance.App.Issuance.Service qualified as Issuance (CreateIssuance(..), RequestCreateIssuance(..), Service)
import Daml.Finance.App.Listing.Model qualified as Listing (T)
import Daml.Finance.App.Listing.Service qualified as Listing (CreateListing(..), RequestCreateListing(..), Service)
import Daml.Finance.App.Trading.Model qualified as Trading (Order, Side(..))
import Daml.Finance.App.Trading.Service qualified as Trading (CreateOrder(..), RequestCreateOrder(..), Service)
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Instrument.Base.Instrument (Instrument(..))
import Daml.Finance.Instrument.Generic.Instrument qualified as Generic (Instrument(..))
import Daml.Finance.Interface.Holding.Account qualified as Account (K, View(..), R, toKey)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Holding.Factory.Account qualified as Account (Create(..), F)
import Daml.Finance.Interface.Holding.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, K, Q, Reference(..), View(..))
import Daml.Finance.Interface.Instrument.Generic.Types (C)
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory)
import Daml.Finance.Setup.Util.Common (getHolding)
import Daml.Script (Script, createCmd, exerciseCmd, exerciseByKeyCmd, query, queryFilter, submitMulti)

-- | Create factory for `Account`.
createFactory : Party -> [(Text, Set Parties)] -> Script (ContractId Account.Factory)
createFactory provider observers = submitMulti [provider] [] do
  createCmd Account.Factory with provider; observers = M.fromList observers

-- | Create `Account`.
createAccount : [Party] -> ContractId Account.F -> ContractId Holding.F -> [(Text, Set Parties)] -> Party -> Party -> Text -> Script Account.K
createAccount readAs factoryCid holdingFactoryCid obs custodian owner id = do
  let
    v = Account.View with custodian; owner; id = Id id; holdingFactoryCid; description = id
    k = Account.toKey v
  submitMulti [v.custodian, v.owner] readAs do
    exerciseCmd factoryCid Account.Create with account = k; holdingFactoryCid; observers = M.fromList obs; description = id
  pure k

createReference : ContractId Instrument.I -> Party -> Party -> Id -> Text -> Time -> [(Text, Set Parties)] -> Script Instrument.K
createReference cid depository issuer id version validAsOf observers = do
  let
    instrumentView = Instrument.View with depository; issuer; id; validAsOf; version; description = show id
    ref = Instrument.Reference with instrumentView; cid; observers = M.fromList observers
  submitMulti [depository, issuer] [] do createCmd ref
  pure $ key ref

-- | Originate an `Instrument`.
originate : Party -> Party -> [(Text, Set Parties)] -> Time -> Text -> Script Instrument.K
originate depository issuer observers validAsOf label = do
  let id = Id label; version = "0"
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Instrument with depository; issuer; id; version; observers = M.fromList observers; validAsOf; description = show id
  createReference cid depository issuer id version validAsOf observers

originateGeneric : Party -> Party -> [(Text, Set Parties)] -> Time -> Text -> C -> Script Instrument.K
originateGeneric depository issuer observers acquisitionTime label claims = do
  let id = Id label; version = "0"
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Generic.Instrument with depository; issuer; id; version; acquisitionTime; claims; observers = M.fromList observers; lastEventTimestamp = acquisitionTime; description = show id
  createReference cid depository issuer id version acquisitionTime observers

transfer : Party -> Account.K -> ContractId Transferable.I -> Script (ContractId Transferable.I)
transfer from toAccount depositCid = do
  submitMulti [from, toAccount.owner] [] do exerciseCmd depositCid Transferable.Transfer with newOwnerAccount = toAccount

deposit : Party -> Party -> Party -> Party -> Instrument.Q -> Account.K -> Script (ContractId Holding.I)
deposit operator provider customer public quantity account = do
  depositRequestCid <- submit customer do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.RequestDeposit with quantity; account
  submitMulti [provider] [public] do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.Deposit with depositRequestCid

issue : Party -> Party -> Party -> Party -> Text -> Instrument.Q -> Account.K -> Script (ContractId Issuance.T, ContractId Holding.I)
issue operator provider customer public id quantity account = do
  createIssuanceRequestCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestCreateIssuance with id; quantity; account
  submitMulti [provider] [public] do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.CreateIssuance with ..

list : Party -> Party -> Party -> Text -> Instrument.K -> Instrument.K -> Parties -> Script (ContractId Listing.T)
list operator provider customer id tradedInstrument quotedInstrument observers = do
  createListingRequestCid <- submit customer do exerciseByKeyCmd @Listing.Service (operator, provider, customer) Listing.RequestCreateListing with id; tradedInstrument; quotedInstrument; observers
  submit provider do exerciseByKeyCmd @Listing.Service (operator, provider, customer) Listing.CreateListing with createListingRequestCid

createOrder : Party -> Party -> Party -> Text -> Trading.Side -> Instrument.Q -> Instrument.Q -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createOrder operator provider customer id side quantity price observers = do
  listingId <- (.id) . snd . head <$> queryFilter @Listing.T observers (\l -> l.tradedInstrument == quantity.unit && l.quotedInstrument == price.unit)
  let
    depository = if side == Trading.Buy then quantity.unit.depository else price.unit.depository
    requiredQuantity = if side == Trading.Buy then price with amount = price.amount * quantity.amount else quantity
  account <- key . snd . head <$> queryFilter @Account.R customer (\a -> a.accountView.custodian == depository)
  holdingCid <- coerceContractId <$> getHolding customer requiredQuantity
  orderCids <- map fst <$> queryFilter @Trading.Order observers (\o -> o.listingId == listingId)
  createOrderRequestCid <- submit customer do exerciseByKeyCmd @Trading.Service (operator, provider, customer) Trading.RequestCreateOrder with id; listingId; quantity; price; side; collateralCid = holdingCid; account; orderCids; observers
  submit provider do exerciseByKeyCmd @Trading.Service (operator, provider, customer) Trading.CreateOrder with createOrderRequestCid

createBidOrder : Party -> Party -> Party -> Text -> Instrument.Q -> Instrument.Q -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createBidOrder operator provider customer id = createOrder operator provider customer id Trading.Buy

createAskOrder : Party -> Party -> Party -> Text -> Instrument.Q -> Instrument.Q -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createAskOrder operator provider customer id = createOrder operator provider customer id Trading.Sell

createAuction : Party -> Party -> Party -> Party -> Text -> Instrument.Q -> Instrument.K -> Decimal -> ContractId Fungible.I -> Account.K -> Script (ContractId Auction.T)
createAuction operator provider customer public id quantity currency floor collateralCid receivableAccount = do
  createAuctionRequestCid <- submit customer do exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.RequestCreateAuction with id; quantity; currency; floor; collateralCid; receivableAccount; observers = singleton public
  submit provider do exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.CreateAuction with createAuctionRequestCid

createAuctionBid : Party -> Party -> Party -> Party -> ContractId Auction.T -> Decimal -> Decimal -> ContractId Fungible.I -> Account.K -> Script (ContractId Bidding.Bid)
createAuctionBid operator provider customer public auctionCid amount price collateralCid receivableAccount = do
  createBidRequestCid <- submitMulti [customer] [public] do exerciseByKeyCmd @Bidding.S (operator, provider, customer) Bidding.RequestCreateBid with auctionCid; amount; price; collateralCid; receivableAccount
  submit provider do exerciseByKeyCmd @Bidding.S (operator, provider, customer) Bidding.CreateBid with createBidRequestCid

processAuction : Party -> Party -> Party -> Party -> ContractId Auction.T -> [ContractId Bidding.Bid] -> Script (ContractId Auction.T)
processAuction operator provider customer public auctionCid bidCids = do
  [(factoryCid, _)] <- query @Settlement.Factory provider
  submitMulti [provider] [public] do
    exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.ProcessAuction
      with
        settlementFactoryCid = toInterfaceContractId factoryCid
        auctionCid
        bidCids
