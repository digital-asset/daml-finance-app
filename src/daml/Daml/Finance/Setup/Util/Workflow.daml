-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Util.Workflow where

import DA.Date (DayOfWeek, toGregorian)
import DA.List (head)
import DA.Map qualified as M (Map, fromList)
import DA.Set (fromList, singleton)
import DA.Text (parseInt)
import DA.Time (time)
import Daml.Finance.App.Custody.Service qualified as Custody (Deposit(..), OpenAccount(..), RequestDeposit(..), RequestOpenAccount(..), Service)
import Daml.Finance.App.Data.AccountDirectory (AccountDirectory(..))
import Daml.Finance.App.Distribution.Auction.Model qualified as Auction (T)
import Daml.Finance.App.Distribution.Auction.Service qualified as Auction (CreateAuction(..), ProcessAuction(..), RequestCreateAuction(..), S)
import Daml.Finance.App.Distribution.Bidding.Model qualified as Bidding (Bid)
import Daml.Finance.App.Distribution.Bidding.Service qualified as Bidding (CreateBid(..), RequestCreateBid(..), S)
import Daml.Finance.App.Distribution.Fund.Model qualified as Fund (PooledInvestmentRequest, T)
import Daml.Finance.App.Distribution.Fund.Service qualified as Fund (FulfillPooledInvestmentRequest(..), PoolInvestmentRequests(..), S)
import Daml.Finance.App.Distribution.Investment.Model qualified as Investment (InvestmentRequest)
import Daml.Finance.App.Distribution.Investment.Service qualified as Investment (RequestInvestment(..), S)
import Daml.Finance.App.Issuance.Model qualified as Issuance (T)
import Daml.Finance.App.Issuance.Service qualified as Issuance (CreateIssuance(..), RequestCreateIssuance(..), Service)
import Daml.Finance.App.Lifecycle.Service qualified as Lifecycle (Service, DeclareDividend(..), DeclareStockSplit(..), DeclareReplacement(..))
import Daml.Finance.App.Listing.Model qualified as Listing (T)
import Daml.Finance.App.Listing.Service qualified as Listing (CreateListing(..), RequestCreateListing(..), Service)
import Daml.Finance.App.Trading.Model qualified as Trading (Order, Side(..))
import Daml.Finance.App.Trading.Service qualified as Trading (CreateOrder(..), RequestCreateOrder(..), Service)
import Daml.Finance.Data.Numeric.Observation qualified as Data (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar qualified as Data (HolidayCalendar(..))
import Daml.Finance.Data.Time.DateClock qualified as Data (DateClock(..))
import Daml.Finance.Data.Time.DateClockUpdate qualified as Data (DateClockUpdateEvent(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Instrument.Token.Instrument qualified as Token (Instrument(..))
import Daml.Finance.Instrument.Equity.Instrument qualified as Equity (Instrument(..))
import Daml.Finance.Instrument.Bond.FixedRate.Instrument qualified as FixedRate (Instrument(..))
import Daml.Finance.Instrument.Bond.FloatingRate.Instrument qualified as FloatingRate (Instrument(..))
import Daml.Finance.Instrument.Bond.InflationLinked.Instrument qualified as InflationLinked (Instrument(..))
import Daml.Finance.Instrument.Bond.ZeroCoupon.Instrument qualified as ZeroCoupon (Instrument(..))
import Daml.Finance.Instrument.Generic.Instrument qualified as Generic (Instrument(..))
import Daml.Finance.Instrument.Swap.Asset.Instrument qualified as AssetSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.CreditDefault.Instrument qualified as CreditDefaultSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.Currency.Instrument qualified as CurrencySwap (Instrument(..))
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchangeSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.Fpml.Instrument qualified as FpmlSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.InterestRate.Instrument qualified as InterestRateSwap (Instrument(..))
import Daml.Finance.Interface.Account.Account qualified as Account (Controllers(..), R)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetView(..), I, Reference(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.FpmlTypes (SwapStream)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Lifecycle.Observable.TimeObservable qualified as TimeObservable (I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), ClaimResult(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I, Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types qualified as Settlement (Allocation, Approval)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), InstrumentKey, InstrumentQuantity, Parties, PartiesMap)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..), BusinessDayConventionEnum, HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum, RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Settlement.Instruction qualified as Instruction (T)
import Daml.Finance.Setup.Util.Common (getHolding)
import Daml.Script

createAccount : Party -> Party -> Party -> Party -> Text -> PartiesMap -> Script AccountKey
createAccount operator custodian owner public id observers = do
  let controllers = Account.Controllers with outgoing = singleton owner; incoming = singleton owner
  openAccountRequestCid <- submit owner do exerciseByKeyCmd @Custody.Service (operator, custodian, owner) Custody.RequestOpenAccount with id = Id id; description = id; controllers; observers
  submitMulti [custodian] [public] do exerciseByKeyCmd @Custody.Service (operator, custodian, owner) Custody.OpenAccount with openAccountRequestCid

createAccountDirectory : Party -> [(InstrumentKey, AccountKey)] -> Parties -> Script (ContractId AccountDirectory)
createAccountDirectory provider mapping observers = do
  submit provider do createCmd AccountDirectory with provider; accounts = M.fromList (map (\(i, a) -> (i.id, a)) mapping); observers

-- | Create a `Reference` for an instrument.
-- Note: This should only be called together with an instrument creation
createReference : ContractId Instrument.I -> Party -> Party -> PartiesMap -> Script InstrumentKey
createReference cid depository issuer observers = do
  instrumentView <- submitMulti [depository, issuer] [] do exerciseCmd cid Instrument.GetView with viewer = issuer
  let ref = Instrument.Reference with instrumentView; cid; observers
  submitMulti [depository, issuer] [] do createCmd ref
  pure $ key ref

-- | Create a schedule for periodic payments.
createPaymentPeriodicSchedule : Date -> [Text] -> BusinessDayConventionEnum -> PeriodEnum -> Int -> Date -> Date -> PeriodicSchedule
createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate = do
  let
    (y, m, d) = toGregorian firstCouponDate
    periodicSchedule = PeriodicSchedule with
      businessDayAdjustment =
        BusinessDayAdjustment with
          calendarIds = holidayCalendarIds
          convention = businessDayConvention
      effectiveDateBusinessDayAdjustment = None
      terminationDateBusinessDayAdjustment = None
      frequency =
        Frequency with
          rollConvention = DOM d
          period = couponPeriod
          periodMultiplier = couponPeriodMultiplier
      effectiveDate = issueDate
      firstRegularPeriodStartDate = Some firstCouponDate
      lastRegularPeriodEndDate = Some maturityDate
      stubPeriodType = None
      terminationDate = maturityDate
  periodicSchedule

createClockAndEvent : [Party] -> Date -> Parties -> Script (ContractId TimeObservable.I, ContractId Event.I)
createClockAndEvent providers today observers = do
  let
    description = show today
    id = Id description
    date = Unit today
    clock = Data.DateClock with providers = fromList providers; date; id; description; observers
  clockCid <- toInterfaceContractId <$> submitMulti providers [] do createCmd clock
  eventCid <- toInterfaceContractId <$> submitMulti providers [] do createCmd Data.DateClockUpdateEvent with providers = fromList providers; id; description; eventTime = time today 0 0 0; date = today; observers
  pure (clockCid, eventCid)

createObservation : Party -> Text -> [(Time, Decimal)] -> M.Map Text Parties -> Script (ContractId NumericObservable.I)
createObservation provider id observations observers = do
  toInterfaceContractId <$> submit provider do createCmd Data.Observation with provider; id = Id id; observations = M.fromList observations; observers

createCalendar : Party -> Text -> [DayOfWeek] -> [Date] -> M.Map Text Parties -> Script (ContractId Data.HolidayCalendar)
createCalendar provider id weekend holidays observers = do
  let
    calendar = HolidayCalendarData with id; weekend; holidays
  submit provider do createCmd Data.HolidayCalendar with provider; calendar; observers

originateToken : Party -> Party -> PartiesMap -> Time -> Text -> Text -> Script InstrumentKey
originateToken depository issuer observers validAsOf id description = do
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Token.Instrument with depository; issuer; id = Id id; version = "0"; observers; validAsOf; description
  createReference cid depository issuer observers

originateEquity : Party -> Party -> PartiesMap -> Time -> Text -> Text -> Script InstrumentKey
originateEquity depository issuer observers validAsOf id description = do
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Equity.Instrument with depository; issuer; id = Id id; version = "0"; observers; validAsOf; description
  createReference cid depository issuer observers

originateGeneric : Party -> Party -> PartiesMap -> Time -> Text -> Text -> C -> Script InstrumentKey
originateGeneric depository issuer observers acquisitionTime id description claims = do
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Generic.Instrument with depository; issuer; id = Id id; description; version = "0"; acquisitionTime; claims; observers; lastEventTimestamp = acquisitionTime
  createReference cid depository issuer observers

originateFixedRateBond : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date-> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Script InstrumentKey
originateFixedRateBond depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier currency = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId @Instrument.I <$> submitMulti [depository, issuer] [] do
    createCmd FixedRate.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; couponRate; currency
  createReference cid depository issuer observers

originateZeroCouponBond : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> Date -> InstrumentKey -> Script InstrumentKey
originateZeroCouponBond depository issuer id description observers lastEventTimestamp issueDate maturityDate currency = do
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd ZeroCoupon.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; issueDate; maturityDate; currency
  createReference cid depository issuer observers

originateFloatingRateBond : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text -> Script InstrumentKey
originateFloatingRateBond depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier currency referenceRateId = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd FloatingRate.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; couponSpread=couponRate; referenceRateId; currency
  createReference cid depository issuer observers

originateInflationLinkedBond : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text -> Decimal -> Script InstrumentKey
originateInflationLinkedBond depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier currency inflationIndexId inflationIndexBaseValue = do
  let periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd InflationLinked.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; couponRate; inflationIndexId; currency; inflationIndexBaseValue
  createReference cid depository issuer observers

originateAssetSwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateAssetSwap depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceAssetId ownerReceivesFix = do
  let periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd AssetSwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; currency; fixRate; referenceAssetId; ownerReceivesFix
  createReference cid depository issuer observers

originateCreditDefaultSwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text -> Text -> Bool -> Script InstrumentKey
originateCreditDefaultSwap depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency defaultProbabilityReferenceId recoveryRateReferenceId ownerReceivesFix = do
  let periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd CreditDefaultSwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; currency; fixRate; defaultProbabilityReferenceId; recoveryRateReferenceId; ownerReceivesFix
  createReference cid depository issuer observers

originateCurrencySwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Decimal -> InstrumentKey -> Decimal -> Decimal -> Bool -> Script InstrumentKey
originateCurrencySwap depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier baseCurrency baseRate foreignCurrency foreignRate fxRate ownerReceivesBase = do
  let periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd CurrencySwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; baseCurrency; baseRate; foreignCurrency; foreignRate; fxRate; ownerReceivesBase
  createReference cid depository issuer observers

originateForeignExchangeSwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> Date -> Date -> InstrumentKey -> InstrumentKey -> Decimal -> Decimal -> Bool -> Script InstrumentKey
originateForeignExchangeSwap depository issuer id description observers lastEventTimestamp issueDate firstPaymentDate maturityDate baseCurrency foreignCurrency firstFxRate finalFxRate ownerReceivesBase = do
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd ForeignExchangeSwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; issueDate; firstPaymentDate; maturityDate; baseCurrency; foreignCurrency; firstFxRate; finalFxRate
  createReference cid depository issuer observers

originateFpmlSwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> [SwapStream] -> Text -> Party -> [InstrumentKey] -> Script InstrumentKey
originateFpmlSwap depository issuer id description observers lastEventTimestamp swapStreams issuerPartyRef calendarDataProvider currencies = do
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd FpmlSwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; swapStreams; issuerPartyRef; calendarDataProvider; currencies
  createReference cid depository issuer observers

originateInterestRateSwap : Party -> Party -> Text -> Text -> PartiesMap -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateInterestRateSwap depository issuer id description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceRateId ownerReceivesFix = do
  let periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd InterestRateSwap.Instrument with depository; issuer; id = Id id; version = "0"; description; observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; currency; fixRate; referenceRateId; ownerReceivesFix
  createReference cid depository issuer observers

transfer : Party -> AccountKey -> Party -> ContractId Transferable.I -> Script (ContractId Transferable.I)
transfer from toAccount public depositCid = do
  submitMulti [from, toAccount.owner] [public] do exerciseCmd depositCid Transferable.Transfer with actors = fromList [from, toAccount.owner]; newOwnerAccount = toAccount

deposit : Party -> Party -> Party -> Party -> InstrumentQuantity -> AccountKey -> Script (ContractId Holding.I)
deposit operator provider customer public quantity account = do
  depositRequestCid <- submit customer do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.RequestDeposit with quantity; account
  submitMulti [provider] [public] do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.Deposit with depositRequestCid

issue : Party -> Party -> Party -> Party -> InstrumentQuantity -> AccountKey -> Script (ContractId Issuance.T, ContractId Holding.I)
issue operator provider customer public quantity account = do
  let
    id = Id $ "ISSUANCE-" <> show quantity.unit.id
    description = "Issuance of " <> show quantity.amount <> " " <> show quantity.unit.id
  createIssuanceRequestCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestCreateIssuance with id; description; quantity; account
  submitMulti [provider] [public] do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.CreateIssuance with ..

list : Party -> Party -> Party -> Text -> InstrumentKey -> InstrumentKey -> Parties -> Script (ContractId Listing.T)
list operator provider customer id tradedInstrument quotedInstrument observers = do
  createListingRequestCid <- submit customer do exerciseByKeyCmd @Listing.Service (operator, provider, customer) Listing.RequestCreateListing with id; tradedInstrument; quotedInstrument; observers
  submit provider do exerciseByKeyCmd @Listing.Service (operator, provider, customer) Listing.CreateListing with createListingRequestCid

createOrder : Party -> Party -> Party -> Party -> Id -> Trading.Side -> InstrumentQuantity -> InstrumentQuantity -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createOrder operator provider customer public id side quantity price observers = do
  listingId <- (.id) . snd . head <$> queryFilter @Listing.T observers (\l -> l.tradedInstrument == quantity.unit && l.quotedInstrument == price.unit)
  let
    depository = if side == Trading.Buy then quantity.unit.depository else price.unit.depository
    requiredQuantity = if side == Trading.Buy then price with amount = price.amount * quantity.amount else quantity
  account <- key . snd . head <$> queryFilter @Account.R customer (\a -> a.accountView.custodian == depository)
  holdingCid <- coerceContractId <$> getHolding customer requiredQuantity
  orderCids <- map fst <$> queryFilter @Trading.Order observers (\o -> o.listingId == listingId)
  createOrderRequestCid <- submit customer do exerciseByKeyCmd @Trading.Service (operator, provider, customer) Trading.RequestCreateOrder with id; listingId; quantity; price; side; collateralCid = holdingCid; account; orderCids; observers
  submitMulti [provider] [public] do exerciseByKeyCmd @Trading.Service (operator, provider, customer) Trading.CreateOrder with createOrderRequestCid

createBidOrder : Party -> Party -> Party -> Party -> Id -> InstrumentQuantity -> InstrumentQuantity -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createBidOrder operator provider customer public id = createOrder operator provider customer public id Trading.Buy

createAskOrder : Party -> Party -> Party -> Party -> Id -> InstrumentQuantity -> InstrumentQuantity -> Parties -> Script (Optional (ContractId Trading.Order, Trading.Order))
createAskOrder operator provider customer public id = createOrder operator provider customer public id Trading.Sell

createAuction : Party -> Party -> Party -> Party -> Text -> InstrumentQuantity -> InstrumentKey -> Decimal -> ContractId Fungible.I -> AccountKey -> Script (ContractId Auction.T)
createAuction operator provider customer public id quantity currency floor collateralCid receivableAccount = do
  createAuctionRequestCid <- submit customer do exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.RequestCreateAuction with id; quantity; currency; floor; collateralCid; receivableAccount; observers = singleton public
  submit provider do exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.CreateAuction with createAuctionRequestCid

createAuctionBid : Party -> Party -> Party -> Party -> ContractId Auction.T -> Decimal -> Decimal -> ContractId Fungible.I -> AccountKey -> Script (ContractId Bidding.Bid)
createAuctionBid operator provider customer public auctionCid amount price collateralCid receivableAccount = do
  createBidRequestCid <- submitMulti [customer] [public] do exerciseByKeyCmd @Bidding.S (operator, provider, customer) Bidding.RequestCreateBid with auctionCid; amount; price; collateralCid; receivableAccount
  submit provider do exerciseByKeyCmd @Bidding.S (operator, provider, customer) Bidding.CreateBid with createBidRequestCid

processAuction : Party -> Party -> Party -> Party -> ContractId Auction.T -> [ContractId Bidding.Bid] -> Script (ContractId Auction.T)
processAuction operator provider customer public auctionCid bidCids = do
  submitMulti [provider] [public] do
    exerciseByKeyCmd @Auction.S (operator, provider, customer) Auction.ProcessAuction
      with
        auctionCid
        bidCids

declareDividend : Party -> Party -> Party -> Party -> InstrumentKey -> Time -> [InstrumentQuantity] -> Script (ContractId Effect.I)
declareDividend operator provider issuer public equity effectiveTime perUnitDistribution = do
  let
    id = "Dividend-" <> show equity.id <> "-" <> equity.version
    Some version = parseInt equity.version
  head <$> submitMulti [issuer] [public] do
    exerciseByKeyCmd @Lifecycle.Service (operator, provider, issuer) Lifecycle.DeclareDividend
      with
        equity
        newVersion = show (version + 1)
        id = Id id
        description = id
        effectiveTime
        perUnitDistribution

declareReplacement : Party -> Party -> Party -> Party -> InstrumentKey -> Time -> [InstrumentQuantity] -> Script (ContractId Effect.I)
declareReplacement operator provider issuer public equity effectiveTime perUnitReplacement = do
  let id = "Replacement-" <> show equity.id <> "-" <> equity.version
  head <$> submitMulti [issuer] [public] do
    exerciseByKeyCmd @Lifecycle.Service (operator, provider, issuer) Lifecycle.DeclareReplacement
      with
        equity
        id = Id id
        description = id
        effectiveTime
        perUnitReplacement

declareStockSplit : Party -> Party -> Party -> Party -> InstrumentKey -> Time -> Decimal -> Script (ContractId Effect.I)
declareStockSplit operator provider issuer public equity effectiveTime adjustmentFactor = do
  let
    id = "StockSplit-" <> show equity.id <> "-" <> equity.version
    Some version = parseInt equity.version
  head <$> submitMulti [issuer] [public] do
    exerciseByKeyCmd @Lifecycle.Service (operator, provider, issuer) Lifecycle.DeclareStockSplit
      with
        equity
        newVersion = show (version + 1)
        id = Id id
        description = id
        effectiveTime
        adjustmentFactor

claimEffect : Party -> Party -> Party -> Party -> ContractId Effect.I -> [ContractId Holding.I] -> Id -> Script (ContractId Batch.I, [ContractId Instruction.I])
claimEffect operator custodian owner public effectCid holdingCids batchId = do
  Some (_, cs) <- queryContractKey @Custody.Service owner (operator, custodian, owner)
  Claim.ClaimResult{batchCid; instructionCids} <- submitMulti [owner] [public] do exerciseCmd cs.claimRuleCid Claim.ClaimEffect with claimer = owner; effectCid; holdingCids; batchId
  pure (batchCid, instructionCids)

allocateAndApprove : Party -> Party -> ContractId Instruction.I -> Settlement.Allocation -> Settlement.Approval -> Script (ContractId Instruction.I)
allocateAndApprove operator settler instructionCid allocation approval = do
  Some i <- queryContractId @Instruction.T settler $ coerceContractId instructionCid
  instructionCid <- fst <$> submit i.routedStep.sender do exerciseCmd instructionCid Instruction.Allocate with actors = singleton settler; allocation
  submit i.routedStep.receiver do exerciseCmd instructionCid Instruction.Approve with actors = singleton settler; approval

createInvestmentRequest : Party -> Party -> Party -> Party -> Text -> Date -> ContractId Fund.T -> ContractId Transferable.I -> Script (ContractId Investment.InvestmentRequest)
createInvestmentRequest operator provider customer public id asOfDate fundCid cashCid =
  submitMulti [customer] [public] do exerciseByKeyCmd @Investment.S (operator, provider, customer) Investment.RequestInvestment with requestId = Id id; asOfDate; fundCid; cashCid

poolInvestmentRequests : Party -> Party -> Party -> Party -> Text -> Date -> ContractId Fund.T -> ContractId Transferable.I -> [ContractId Investment.InvestmentRequest] -> Script (ContractId Fund.PooledInvestmentRequest)
poolInvestmentRequests operator provider customer public id asOfDate fundCid cashCid investmentRequestCids =
  submitMulti [customer] [public] do exerciseByKeyCmd @Fund.S (operator, provider, customer) Fund.PoolInvestmentRequests with requestId = Id id; asOfDate; fundCid; cashCid; investmentRequestCids

fulfillPooledInvestmentRequest : Party -> Party -> Party -> Party -> ContractId Fund.T -> ContractId Fund.PooledInvestmentRequest -> ContractId NumericObservable.I -> Script [ContractId Holding.I]
fulfillPooledInvestmentRequest operator provider customer public fundCid pooledInvestmentRequestCid navObservableCid =
  submitMulti [provider] [public] do exerciseByKeyCmd @Fund.S (operator, provider, customer) Fund.FulfillPooledInvestmentRequest with fundCid; pooledInvestmentRequestCid; navObservableCid
