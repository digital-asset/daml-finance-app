-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Util.Service where

import DA.Map qualified as M (fromList)
import DA.Set (fromList, singleton)
import Daml.Finance.App.Custody.Service qualified as Custody (Accept(..), Service)
import Daml.Finance.App.Issuance.Auto.Service qualified as IssuanceAuto (Accept(..), Service)
import Daml.Finance.App.Issuance.Service qualified as Issuance (Accept(..), Service)
import Daml.Finance.App.BackToBack.Service qualified as BackToBack (Accept(..), Service)
import Daml.Finance.App.Lifecycle.Service qualified as Lifecycle (Accept(..), Service)
import Daml.Finance.App.Trading.Auto.Service qualified as TradingAuto (Accept(..), Service)
import Daml.Finance.App.Trading.Service qualified as Trading (Accept(..), Service)
import Daml.Finance.App.Lending.Service qualified as Lending (Accept(..), Service)
import Daml.Finance.App.Listing.Auto.Service qualified as ListingAuto (Accept(..), Service)
import Daml.Finance.App.Listing.Service qualified as Listing (Accept(..), Service)
import Daml.Finance.App.Distribution.Auction.Auto.Service qualified as AuctionAuto (Accept(..), Service)
import Daml.Finance.App.Distribution.Auction.Service qualified as Auction (Accept(..), Service)
import Daml.Finance.App.Distribution.Bidding.Auto.Service qualified as BiddingAuto (Accept(..), Service)
import Daml.Finance.App.Distribution.Bidding.Service qualified as Bidding (Accept(..), Service)
import Daml.Finance.App.Distribution.Fund.Service qualified as Fund (Accept(..), Service)
import Daml.Finance.App.Distribution.Investment.Service qualified as Investment (Accept(..), Service)
import Daml.Finance.App.Distribution.Subscription.Service qualified as Subscription (Accept(..), Service)
import Daml.Finance.App.Role.Custodian qualified as Custodian
import Daml.Finance.App.Role.Distributor qualified as Distributor
import Daml.Finance.App.Role.Exchange qualified as Exchange
import Daml.Finance.App.Settlement.Service qualified as Settlement (Accept(..), Service)
import Daml.Finance.App.Structuring.Auto.Service qualified as StructuringAuto (Accept(..), Service)
import Daml.Finance.App.Structuring.Service qualified as Structuring (Accept(..), Factories(..), Service)
import Daml.Finance.Instrument.Bond.FixedRate.Factory qualified as FixedRateBond (Factory(..))
import Daml.Finance.Instrument.Bond.FloatingRate.Factory qualified as FloatingRateBond (Factory(..))
import Daml.Finance.Instrument.Bond.InflationLinked.Factory qualified as InflationLinkedBond (Factory(..))
import Daml.Finance.Instrument.Bond.ZeroCoupon.Factory qualified as ZeroCouponBond (Factory(..))
import Daml.Finance.Instrument.Equity.Factory qualified as Equity (Factory(..))
import Daml.Finance.Instrument.Generic.Factory qualified as Generic (Factory(..))
import Daml.Finance.Instrument.Token.Factory qualified as Token (Factory(..))
import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (Factory)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Lifecycle.Rule.Distribution qualified as Distribution (Rule(..))
import Daml.Finance.Lifecycle.Rule.Replacement qualified as Replacement (Rule(..))
import Daml.Script

createCustodyService : Party -> Party -> Party -> ContractId Settlement.Factory -> ContractId Account.F -> ContractId Holding.F -> Script (ContractId Custody.Service)
createCustodyService operator custodian customer settlementFactoryCid accountFactoryCid holdingFactoryCid = do
  let providers = fromList [custodian, customer]
  claimRuleCid <- toInterfaceContractId <$> submitMulti [custodian, customer] [] do createCmd Claim.Rule with providers = fromList [custodian, customer]; claimers = providers; settlers = providers; settlementFactoryCid; netInstructions = False
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferCustodyService with customer; claimRuleCid; accountFactoryCid; holdingFactoryCid
  submit customer do exerciseCmd offerCid Custody.Accept

createIssuanceService : Party -> Party -> Party -> Script (ContractId Issuance.Service)
createIssuanceService operator custodian customer = do
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferIssuanceService with ..
  submit customer do exerciseCmd offerCid Issuance.Accept

createIssuanceAutoService : Party -> Party -> Party -> Script (ContractId IssuanceAuto.Service)
createIssuanceAutoService operator custodian customer = do
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferIssuanceAutoService with ..
  submit customer do exerciseCmd offerCid IssuanceAuto.Accept

createStructuringService : Party -> Party -> Party -> Script (ContractId Structuring.Service)
createStructuringService operator custodian customer = do
  token <- toInterfaceContractId <$> submit custodian do createCmd Token.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  equity <- toInterfaceContractId <$> submit custodian do createCmd Equity.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  generic <- toInterfaceContractId <$> submit custodian do createCmd Generic.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  fixedRateBond <- toInterfaceContractId <$> submit custodian do createCmd FixedRateBond.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  floatingRateBond <- toInterfaceContractId <$> submit custodian do createCmd FloatingRateBond.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  inflationLinkedBond <- toInterfaceContractId <$> submit custodian do createCmd InflationLinkedBond.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  zeroCouponBond <- toInterfaceContractId <$> submit custodian do createCmd ZeroCouponBond.Factory with provider = custodian; observers = M.fromList [("Default", singleton customer)]
  let factories = Structuring.Factories with token; equity; generic; fixedRateBond; floatingRateBond; inflationLinkedBond; zeroCouponBond
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferStructuringService with ..
  submit customer do exerciseCmd offerCid Structuring.Accept

createStructuringAutoService : Party -> Party -> Party -> Script (ContractId StructuringAuto.Service)
createStructuringAutoService operator custodian customer = do
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferStructuringAutoService with ..
  submit customer do exerciseCmd offerCid StructuringAuto.Accept

createBackToBackIssuanceService : Party -> Party -> Party -> Party -> Script (ContractId BackToBack.Service)
createBackToBackIssuanceService operator custodian customer public = do
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferBackToBackService with ..
  submit customer do exerciseCmd offerCid BackToBack.Accept

createLifecycleService : Party -> Party -> Party -> Party -> Script (ContractId Lifecycle.Service)
createLifecycleService operator custodian customer public = do
  distributionRuleCid <- toInterfaceContractId <$> submit custodian do createCmd Distribution.Rule with providers = singleton custodian; lifecycler = customer; observers = singleton public
  replacementRuleCid <- toInterfaceContractId <$> submit custodian do createCmd Replacement.Rule with providers = singleton custodian; lifecycler = customer; observers = singleton public
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferLifecycleService with ..
  submit customer do exerciseCmd offerCid Lifecycle.Accept

createTradingService : Party -> Party -> Party -> ContractId Settlement.Factory -> Script (ContractId Trading.Service)
createTradingService operator exchange customer settlementFactoryCid = do
  offerCid <- submit exchange do exerciseByKeyCmd @Exchange.Role (operator, exchange) Exchange.OfferTradingService with customer; settlementFactoryCid
  submit customer do exerciseCmd offerCid Trading.Accept

createTradingAutoService : Party -> Party -> Party -> Script (ContractId TradingAuto.Service)
createTradingAutoService operator exchange customer = do
  offerCid <- submit exchange do exerciseByKeyCmd @Exchange.Role (operator, exchange) Exchange.OfferTradingAutoService with ..
  submit customer do exerciseCmd offerCid TradingAuto.Accept

createListingService : Party -> Party -> Party -> Script (ContractId Listing.Service)
createListingService operator exchange customer = do
  offerCid <- submit exchange do exerciseByKeyCmd @Exchange.Role (operator, exchange) Exchange.OfferListingService with ..
  submit customer do exerciseCmd offerCid Listing.Accept

createListingAutoService : Party -> Party -> Party -> Script (ContractId ListingAuto.Service)
createListingAutoService operator exchange customer = do
  offerCid <- submit exchange do exerciseByKeyCmd @Exchange.Role (operator, exchange) Exchange.OfferListingAutoService with ..
  submit customer do exerciseCmd offerCid ListingAuto.Accept

createAuctionService : Party -> Party -> Party -> Script (ContractId Auction.Service)
createAuctionService operator distributor customer = do
  offerCid <- submit distributor do exerciseByKeyCmd @Distributor.Role (operator, distributor) Distributor.OfferAuctionService with customer
  submit customer do exerciseCmd offerCid Auction.Accept

createAuctionAutoService : Party -> Party -> Party -> Script (ContractId AuctionAuto.Service)
createAuctionAutoService operator distributor customer = do
  offerCid <- submit distributor do exerciseByKeyCmd @Distributor.Role (operator, distributor) Distributor.OfferAuctionAutoService with customer
  submit customer do exerciseCmd offerCid AuctionAuto.Accept

createBiddingService : Party -> Party -> Party -> Script (ContractId Bidding.Service)
createBiddingService operator distributor customer = do
  offerCid <- submit distributor do exerciseByKeyCmd @Distributor.Role (operator, distributor) Distributor.OfferBiddingService with ..
  submit customer do exerciseCmd offerCid Bidding.Accept

createBiddingAutoService : Party -> Party -> Party -> Script (ContractId BiddingAuto.Service)
createBiddingAutoService operator distributor customer = do
  offerCid <- submit distributor do exerciseByKeyCmd @Distributor.Role (operator, distributor) Distributor.OfferBiddingAutoService with ..
  submit customer do exerciseCmd offerCid BiddingAuto.Accept

createSubscriptionService : Party -> Party -> Party -> Party -> Script (ContractId Subscription.Service)
createSubscriptionService operator distributor customer public = do
  offerCid <- submit distributor do exerciseByKeyCmd @Distributor.Role (operator, distributor) Distributor.OfferSubscriptionService with customer; public
  submit customer do exerciseCmd offerCid Subscription.Accept

createLendingService : Party -> Party -> Party -> Script (ContractId Lending.Service)
createLendingService operator lender borrower = do
  offerCid <- submit lender do exerciseByKeyCmd @Custodian.Role (operator, lender) Custodian.OfferLendingService with customer = borrower
  submit borrower do exerciseCmd offerCid Lending.Accept

createSettlementService : Party -> Party -> Party -> Script (ContractId Settlement.Service)
createSettlementService operator custodian customer = do
  offerCid <- submit custodian do exerciseByKeyCmd @Custodian.Role (operator, custodian) Custodian.OfferSettlementService with customer
  submit customer do exerciseCmd offerCid Settlement.Accept

createInvestmentService : Party -> Party -> Party -> Script (ContractId Investment.Service)
createInvestmentService operator provider customer = do
  offerCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferInvestmentService with customer
  submit customer do exerciseCmd offerCid Investment.Accept

createFundService : Party -> Party -> Party -> Script (ContractId Fund.Service)
createFundService operator provider customer = do
  offerCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferFundService with customer
  submit customer do exerciseCmd offerCid Fund.Accept
