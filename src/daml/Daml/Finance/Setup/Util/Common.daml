-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Setup.Util.Common where

import DA.List (head, singleton)
import DA.Optional (fromOptional)
import DA.Text (asciiToLower, replace)
import Daml.Finance.Holding.Fungible qualified as Fungible (T)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Split(..), SplitResult(..))
import Daml.Finance.Interface.Holding.Holding qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetCid(..), R)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, InstrumentQuantity)
import Daml.Script

data PartyInfo = PartyInfo
  with
    scenario : Text
    name : Text
    id : Party
  deriving (Eq, Show)

allocateUser : Text -> [Party] -> [Party] -> Script User
allocateUser displayName actAsParties readAsParties = do
  userId <- validateUserId $ asciiToLower displayName
  let
    user = User userId (Some $ head actAsParties)
    actAsRights = fmap CanActAs actAsParties
    readAsRights = fmap CanReadAs readAsParties
  createUser user $ actAsRights ++ readAsRights
  pure user

allocateParties : Text -> [Text] -> Text -> Script [PartyInfo]
allocateParties scenario partyNames publicPartyName = do
  existingParties <- listKnownParties
  let
    scopedPartyName p = p <> "-" <> scenario
    allocate publicParty party =
      case find (\d -> (fromOptional "" d.displayName) == party) existingParties of
        Some detail -> do pure detail.party
        None -> do
          let
            scopedPartyName = party <> "-" <> scenario
            scopedUserName = replace " " "-" scopedPartyName
          p <- allocatePartyWithHint scopedPartyName $ PartyIdHint scopedPartyName
          u <- allocateUser scopedUserName [p] [publicParty]
          pure p
  publicParty <- allocatePartyWithHint (scopedPartyName publicPartyName) $ PartyIdHint (scopedPartyName publicPartyName)
  parties <- mapA (allocate publicParty) partyNames
  pure $ map (\(name, id) -> PartyInfo with scenario; name; id) $ zip partyNames parties ++ singleton (publicPartyName, publicParty)

getHolding : Party -> InstrumentQuantity -> Script (ContractId Holding.I)
getHolding party quantity = do
  (holdingCid, holding) <- head <$> queryFilter @Fungible.T party (\h -> h.instrument == quantity.unit && h.amount >= quantity.amount)
  if holding.amount > quantity.amount
  then do
    Fungible.SplitResult{splitCids} <- submit party do exerciseCmd (toInterfaceContractId @Fungible.I holdingCid) Fungible.Split with amounts = [ quantity.amount ]
    pure $ (toInterfaceContractId . head) splitCids
  else do
    pure $ toInterfaceContractId holdingCid

-- | Utility for exercising interface by key (submitMulti composed with exerciseInterfaceByKey helper)
submitExerciseInterfaceByKeyCmdHelper : forall t1 t2 t c1 k c2 b .
    Template t1 => Choice t1 c1 (ContractId t) => HasKey t1 k => HasLookupByKey t1 k => HasFetchByKey t1 k => HasMaintainer t1 k => HasToAnyContractKey t1 k => HasFromAnyContractKey t1 k =>
    HasTemplateTypeRep t2 => HasToAnyTemplate t2 => HasFromAnyTemplate t2 => HasToAnyChoice t2 c2 b => HasFromAnyChoice t2 c2 b => HasExercise t2 c2 b
    => [Party] -> [Party] -> k -> c1 -> c2 -> Script b
submitExerciseInterfaceByKeyCmdHelper actAs readAs k arg1 arg2 = do
  cid : ContractId t <- submitMulti actAs readAs do exerciseByKeyCmd @t1 k arg1
  let cid' : ContractId t2 = coerceContractId cid
  submitMulti actAs readAs do exerciseCmd cid' arg2

-- | Utility for exercising an interface by key.
submitExerciseInterfaceByKeyCmd : forall t2 c2 b . HasTemplateTypeRep t2 => HasToAnyTemplate t2 => HasFromAnyTemplate t2 => HasFromAnyChoice t2 c2 b => HasToAnyChoice t2 c2 b => HasExercise t2 c2 b => [Party] -> [Party] -> InstrumentKey -> c2 -> Script b
submitExerciseInterfaceByKeyCmd actAs readAs k arg = submitExerciseInterfaceByKeyCmdHelper @Instrument.R @t2 actAs readAs k (Instrument.GetCid with viewer = head actAs) arg
