-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Util.Common where

import DA.List (head)
import DA.Optional (fromOptional)
import Daml.Finance.Holding.Fungible qualified as Fungible (T)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (Split(..), SplitResult(..))
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (Q)
import Daml.Script

data PartyInfo = PartyInfo
  with
    scenario : Text
    name : Text
    id : Party
  deriving (Eq, Show)

allocateParties : Text -> [Text] -> Script [PartyInfo]
allocateParties scenario partyNames = do
  existingParties <- listKnownParties
  let
    allocate party =
      case find (\d -> (fromOptional "" d.displayName) == party) existingParties of
        Some detail -> do pure detail.party
        None -> do allocatePartyWithHint (party <> "-" <> scenario) $ PartyIdHint (party <> "-" <> scenario)
  parties <- mapA allocate partyNames
  pure $ map (\(name, id) -> PartyInfo with scenario; name; id) $ zip partyNames parties

getHolding : Party -> Instrument.Q -> Script (ContractId Holding.I)
getHolding party quantity = do
  (holdingCid, holding) <- head <$> queryFilter @Fungible.T party (\h -> h.instrument == quantity.unit && h.amount >= quantity.amount)
  if holding.amount > quantity.amount
  then do
    Fungible.SplitResult{splitCids} <- submit party do exerciseCmd holdingCid Fungible.Split with amounts = [ quantity.amount ]
    pure $ (toInterfaceContractId . head) splitCids
  else do
    pure $ toInterfaceContractId holdingCid
