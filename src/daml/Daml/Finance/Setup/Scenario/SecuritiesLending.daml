-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.SecuritiesLending where

import DA.Date (Month(..), addDays, date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.App.Lending.Model qualified as Lending (Repay(..))
import Daml.Finance.App.Lending.Service qualified as Lending (AcceptBorrowOffer(..), CreateBorrowOffer(..), RequestBorrowOffer(..), Service)
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Setup.Payoff
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run  = do
  let scenario = "Securities Lending"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Borrower", "Lender"]
  let
    [operator, public, centralBank, registry, borrower, lender] = map (.id) parties
    pub = fromList [("Public", singleton $ singleton public)]

  -- Factories
  accountFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Settlement.Factory with provider = operator; observers = singleton public

  -- Roles
  createOperatorRole  operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createCustodianRole operator lender

  -- Create custody services
  createCustodyService      operator centralBank  borrower  settlementFactoryCid
  createCustodyService      operator centralBank  lender    settlementFactoryCid
  createCustodyService      operator registry     borrower  settlementFactoryCid
  createCustodyService      operator registry     lender    settlementFactoryCid
  createCustodyService      operator lender       borrower  settlementFactoryCid
  createLendingService      operator lender       borrower
  createStructuringService  operator registry     lender
  createLifecycleService    operator registry     lender    public

  -- Accounts
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  borrowerLenderAccount <- createAcc empty lender borrower  "Borrower@Lender"
  borrowerCashAccount   <- createAcc empty centralBank borrower  "Borrower@CentralBank"
  lenderCashAccount     <- createAcc empty centralBank lender    "Lender@CentralBank"
  lenderSecAccount      <- createAcc empty registry    lender    "Lender@Registry"
  borrowerSecAccount    <- createAcc empty registry    borrower  "Borrower@Registry"

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    (todayYear, todayMonth, todayDay) = toGregorian today
    clock = DateClock with u = Unit today, id = Id "Clock", provider = lender, observers = pub
  submit lender do createCmd clock
  submitMulti [lender] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Instruments
  usd   <- originate         centralBank centralBank pub todayTime "USD" "United States Dollar"
  tsla  <- originate         registry    registry    pub todayTime "TSLA" "Tesla, Inc. Common Stock"
  deal1 <- originateGeneric  registry      lender    pub todayTime "DEAL1" $ loan today (addDays today 28) tsla 0.002 usd [addDays today 7, addDays today 14, addDays today 21, addDays today 28]

  -- Distribution
  deposit operator lender borrower public (Instrument.qty    10_000.0 deal1) borrowerLenderAccount
  borrowedCid   <- coerceContractId <$> deposit operator registry    lender   public (Instrument.qty     1_000.0 tsla) lenderSecAccount
  collateralCid <- coerceContractId <$> deposit operator centralBank borrower public (Instrument.qty 1_000_000.0 usd) borrowerCashAccount
  interestCid   <- coerceContractId <$> deposit operator centralBank borrower public (Instrument.qty     1_000.0 usd) borrowerCashAccount

  -- Workflows
  let
    doLoan = do
      let
        borrowed   = Instrument.qty     1_000.0 tsla
        interest   = Instrument.qty     1_000.0 usd
        collateral = Instrument.qty 1_000_000.0 usd

      borrowOfferRequestCid <- submit borrower do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.RequestBorrowOffer with id = "BORROW"; borrowed; maturity = date 2022 Sep 14
      borrowOfferCid <- submit lender do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.CreateBorrowOffer with borrowOfferRequestCid; interest; collateral; borrowedCid; lenderBorrowedAccount = lenderSecAccount; lenderInterestAccount = lenderCashAccount
      (borrowedCid, borrowAgreementCid) <- submitMulti [borrower] [public] do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.AcceptBorrowOffer with borrowOfferCid; collateralCid; account = borrowerSecAccount
      submitMulti [borrower] [public] do exerciseCmd borrowAgreementCid Lending.Repay with borrowedCid; interestCid

  -- doLoan

  pure parties
