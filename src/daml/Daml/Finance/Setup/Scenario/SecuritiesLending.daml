-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.SecuritiesLending where

import DA.Date (Month(..), addDays, date, toDateUTC, toGregorian)
import DA.Map (fromList)
import DA.Set (empty, singleton)
import DA.Time (time)
import Daml.Finance.App.Lending.Model qualified as Lending (Repay(..))
import Daml.Finance.App.Lending.Service qualified as Lending (AcceptBorrowOffer(..), CreateBorrowOffer(..), RequestBorrowOffer(..), Service)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Setup.Payoff (loan)
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script (Script, createCmd, exerciseByKeyCmd, exerciseCmd, submitMulti)

run : Script [PartyInfo]
run  = do
  let scenario = "Securities Lending"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Borrower", "Lender"]
  let [operator, public, centralBank, registry, borrower, lender] = map (.id) parties

  -- Create roles
  createOperatorRole operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createCustodianRole operator lender

  -- Create custody services
  createCustodyService operator centralBank borrower
  createCustodyService operator centralBank lender
  createCustodyService operator registry borrower
  createCustodyService operator registry lender
  createCustodyService operator lender borrower

  createLendingService operator lender borrower
  createStructuringService operator registry lender
  createLifecycleService operator registry lender

  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    (todayYear, todayMonth, todayDay) = toGregorian today
    pub = [("Public", singleton $ singleton public)]

  -- Create clock
  let clock = DateClock with u = Unit today, id = Id "Clock", provider = lender, observers = fromList pub
  submit lender do createCmd clock
  submitMulti [lender] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Create accounts
  accountFactoryCid <- toInterfaceContractId <$> createFactory operator pub
  holdingFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory with provider = operator; observers = fromList pub
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  borrowerLenderAccount <- createAcc [] lender borrower  "Borrower@Lender"
  borrowerCashAccount <- createAcc [] centralBank borrower  "Borrower@CentralBank"
  lenderCashAccount   <- createAcc [] centralBank lender    "Lender@CentralBank"
  lenderSecAccount    <- createAcc [] registry    lender    "Lender@Registry"
  borrowerSecAccount  <- createAcc [] registry    borrower  "Borrower@Registry"

  settlementFactoryCid <- toInterfaceContractId <$> submit lender do createCmd Factory with provider = lender; observers = empty
  submitMulti [lender, borrower] [] do createCmd Claim.Rule with custodian = lender; owner = borrower; claimers = singleton lender; settler = lender; factoryCid = settlementFactoryCid

  -- Instruments
  usd   <- originate         centralBank centralBank pub todayTime "USD"
  tsla  <- originate         registry    registry    pub todayTime "TSLA"
  deal1 <- originateGeneric  registry      lender    pub todayTime "DEAL1" $ loan today (addDays today 28) tsla 0.002 usd [addDays today 7, addDays today 14, addDays today 21, addDays today 28]

  coerceContractId <$> deposit operator lender borrower public (Instrument.qty    10_000.0 deal1) borrowerLenderAccount
  borrowedCid   <- coerceContractId <$> deposit operator registry    lender   public (Instrument.qty     1_000.0 tsla) lenderSecAccount
  collateralCid <- coerceContractId <$> deposit operator centralBank borrower public (Instrument.qty 1_000_000.0 usd) borrowerCashAccount
  interestCid   <- coerceContractId <$> deposit operator centralBank borrower public (Instrument.qty     1_000.0 usd) borrowerCashAccount

  let
    doLoan = do
      let
        borrowed   = Instrument.qty     1_000.0 tsla
        interest   = Instrument.qty     1_000.0 usd
        collateral = Instrument.qty 1_000_000.0 usd

      borrowOfferRequestCid <- submit borrower do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.RequestBorrowOffer with id = "BORROW"; borrowed; maturity = date 2022 Sep 14
      borrowOfferCid <- submit lender do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.CreateBorrowOffer with borrowOfferRequestCid; interest; collateral; borrowedCid; lenderBorrowedAccount = lenderSecAccount; lenderInterestAccount = lenderCashAccount
      (borrowedCid, borrowAgreementCid) <- submitMulti [borrower] [public] do exerciseByKeyCmd @Lending.Service (operator, lender, borrower) Lending.AcceptBorrowOffer with borrowOfferCid; collateralCid; account = borrowerSecAccount
      submitMulti [borrower] [public] do exerciseCmd borrowAgreementCid Lending.Repay with borrowedCid; interestCid

  -- doLoan

  pure parties
