-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.NaturalGas where

import DA.Date (addDays, toDateUTC)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Data.Observable.Observation (Observation(..))
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (FactoryWithIntermediaries(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Finance.Setup.Payoff
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run  = do
  parties <- allocateParties "Natural Gas" ["Operator", "CashProvider", "Seller", "Buyer"] "Public"
  let
    all@[operator, cashProvider, seller, buyer, public] = map (.id) parties
    pub = fromList [("Public", singleton public)]

  -- Factories
  let
    assets = ["Z4200L", "Z4GEN", "Z4300L", "NATGAS1", "NATGAS2", "NATGAS3", "NATGAS4"]
    cashSettlementPaths = [[buyer], [seller]]
    securitySettlementPaths = [[buyer]]
    cashRoute = Settlement.Hierarchy with rootCustodian = cashProvider; pathsToRootCustodian = cashSettlementPaths
    secRoute = Settlement.Hierarchy with rootCustodian = seller; pathsToRootCustodian = securitySettlementPaths
    paths = fromList $ ("USD", cashRoute) :: map (\a -> (a, secRoute)) assets
  accountFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid      <- toInterfaceContractId <$> submit operator do createCmd Settlement.FactoryWithIntermediaries with provider = operator; paths; observers = singleton public

  -- Roles
  createOperatorRole  operator
  createCustodianRole operator cashProvider
  createCustodianRole operator seller

  -- Services
  createCustodyService    operator cashProvider seller  settlementFactoryCid accountFactoryCid holdingFactoryCid
  createCustodyService    operator cashProvider buyer   settlementFactoryCid accountFactoryCid holdingFactoryCid
  createCustodyService    operator seller       buyer   settlementFactoryCid accountFactoryCid holdingFactoryCid
  createIssuanceService   operator seller       seller
  createLifecycleService  operator seller       seller  public

  -- Accounts
  sellerCashAccount   <- createAccount operator cashProvider  seller  public "Seller@CashProvider" empty
  buyerCashAccount    <- createAccount operator cashProvider  buyer   public "Buyer@CashProvider"  empty
  buyerSecAccount     <- createAccount operator seller        buyer   public "Buyer@Seller"        empty

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    t1 = addDays today 1
    t1t = time t1 12 0 0
    t3 = addDays today 3
  createClockAndEvent all today (singleton public)

  -- Base Instruments
  usd     <- originateToken cashProvider cashProvider pub todayTime "USD" "United States Dollar"
  z4200L  <- originateToken seller      seller      pub todayTime "Z4200L" "Z4200L"
  z4GEN   <- originateToken seller      seller      pub todayTime "Z4GEN" "Z4GEN"
  z4300L  <- originateToken seller      seller      pub todayTime "Z4300L" "Z4300L"

  -- Structured Instruments
  let
    gdTgp219 = "GD TGP 24-219 + 0"
    gdTgp300 = "GD TGP 24-300 + 0"
    deliveries =
      [ qty 2_000.0 z4200L
      , qty 4_000.0 z4GEN
      , qty 4_000.0 z4300L ]
  ng1 <- originateGeneric seller seller pub todayTime "NATGAS1" "Multi-location Fixed-Price Daily"  $ ngMultiLocation         t1 t3 deliveries 5.25 usd
  ng2 <- originateGeneric seller seller pub todayTime "NATGAS2" "Location/Pricing Option Daily"     $ ngLocationPricingOption t1 t3  5_000.0 z4200L gdTgp219 z4GEN gdTgp300 usd
  ng3 <- originateGeneric seller seller pub todayTime "NATGAS3" "Capped Pricing Daily"              $ ngCapped                t1 t3 10_000.0 z4200L gdTgp219 5.75 usd
  ng4 <- originateGeneric seller seller pub todayTime "NATGAS4" "Price-conditional Location Daily"  $ ngConditionalLocation   t1 t3 10_000.0 z4200L gdTgp219 5.50 z4GEN gdTgp300 usd

  -- Data
  createAccountDirectory seller [(usd, sellerCashAccount)] $ singleton public
  createAccountDirectory buyer  [(usd, buyerCashAccount), (ng1, buyerSecAccount), (ng3, buyerSecAccount), (ng4, buyerSecAccount)] $ singleton public

  -- Distribution
  buyerCashCid <- deposit operator cashProvider buyer public (qty 1_000_000.0 usd) buyerCashAccount
  buyerSecCid1 <- deposit operator seller       buyer public (qty 1.0 ng1)         buyerSecAccount
  buyerSecCid2 <- deposit operator seller       buyer public (qty 1.0 ng3)         buyerSecAccount
  buyerSecCid2 <- deposit operator seller       buyer public (qty 1.0 ng4)         buyerSecAccount

  -- Data
  let
    obs =
      [ Observation with provider = seller; id = Id gdTgp219; observations = fromList [(t1t, 6.00)]; observers = pub
      , Observation with provider = seller; id = Id gdTgp300; observations = fromList [(t1t, 5.90)]; observers = pub ]
  obsCids <- mapA (\f -> submitMulti [seller] [] do createCmd f) obs

  pure parties
