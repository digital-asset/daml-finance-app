-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.CorporateActions where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.List (head)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run = do
  let scenario = "Corporate Actions"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Issuer", "Custodian", "Investor1", "Investor2", "Investor3"]
  let
    [operator, public, centralBank, registry, issuer, custodian, alice, bob, charlie] = map (.id) parties
    pub = fromList [("Public", singleton $ singleton public)]

  -- Factories
  accountFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Settlement.Factory with provider = operator; observers = singleton public

  -- Roles
  createOperatorRole  operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createCustodianRole operator issuer
  createCustodianRole operator custodian

  -- Services
  createCustodyService          operator centralBank  issuer    settlementFactoryCid
  createCustodyService          operator centralBank  registry  settlementFactoryCid
  createCustodyService          operator centralBank  custodian settlementFactoryCid
  createCustodyService          operator issuer       registry  settlementFactoryCid
  createCustodyService          operator registry     custodian settlementFactoryCid
  createCustodyService          operator custodian    alice     settlementFactoryCid
  createCustodyService          operator custodian    bob       settlementFactoryCid
  createCustodyService          operator custodian    charlie   settlementFactoryCid
  createIssuanceService         operator registry     issuer
  createIssuanceAutoService     operator registry     issuer
  createStructuringService      operator registry     issuer
  createStructuringAutoService  operator registry     issuer
  createLifecycleService        operator registry     issuer    public
  createSettlementService       operator issuer       registry
  createSettlementService       operator registry     custodian
  createSettlementService       operator custodian    alice
  createSettlementService       operator custodian    bob
  createSettlementService       operator custodian    charlie

  -- Accounts
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  issuerCashAccount     <- createAcc empty centralBank issuer    "Issuer@CentralBank|Cash"
  registryCashAccount   <- createAcc empty centralBank registry  "Registry@CentralBank|Cash"
  custodianCashAccount  <- createAcc empty centralBank custodian "Custodian@CentralBank|Cash"
  aliceCashAccount      <- createAcc empty custodian   alice     "Investor1@Custodian|Cash"
  bobCashAccount        <- createAcc empty custodian   bob       "Investor2@Custodian|Cash"
  charlieCashAccount    <- createAcc empty custodian   charlie   "Investor3@Custodian|Cash"
  registrySecAccount    <- createAcc empty issuer      registry  "Issuer@Registry|Securities"
  issuerSecAccount      <- createAcc empty registry    issuer    "Registry@Issuer|Securities"
  custodianSecAccount   <- createAcc empty registry    custodian "Custodian@Registry|Securities"
  aliceSecAccount       <- createAcc empty custodian   alice     "Investor1@Custodian|Securities"
  bobSecAccount         <- createAcc empty custodian   bob       "Investor2@Custodian|Securities"
  charlieSecAccount     <- createAcc empty custodian   charlie   "Investor3@Custodian|Securities"

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    tt d = time d 12 0 0
    epoch = tt $ date 1970 Jan 1
    (ty, tm, td) = toGregorian today
    clock = DateClock with u = Unit $ today, id = Id "Clock", provider = registry, observers = pub
  clockCid <- toInterfaceContractId @Clock.I <$> submitMulti [registry] [] do createCmd clock
  eventCid <- toInterfaceContractId @Event.I <$> submitMulti [registry] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Instruments
  usd    <- originate       centralBank centralBank pub epoch "USD"   "United States Dollar"
  equity <- originateEquity registry    issuer      pub epoch "NewCo" "NewCo, Inc. Common Stock"

  -- Distribution
  registryEquityCid     <- deposit  operator issuer   registry  public (Instrument.qty 1_000_000.0 equity) registrySecAccount
  (_, issuerEquityCid)  <- issue    operator registry issuer public (Instrument.qty 1_000_000.0 equity) issuerSecAccount
  custodianEquityCid    <- transfer issuer   custodianSecAccount public $ coerceContractId issuerEquityCid
  aliceEquityCid        <- deposit  operator custodian alice   public (Instrument.qty 500_000.0 equity) aliceSecAccount
  bobEquityCid          <- deposit  operator custodian bob     public (Instrument.qty 300_000.0 equity) bobSecAccount
  charlieEquityCid      <- deposit  operator custodian charlie public (Instrument.qty 200_000.0 equity) charlieSecAccount

  issuerCashCid         <- coerceContractId <$> deposit  operator centralBank issuer     public (Instrument.qty 500_000.0 usd) issuerCashAccount
  registryCashCid       <- coerceContractId <$> deposit  operator centralBank registry   public (Instrument.qty 500_000.0 usd) registryCashAccount

  -- Workflows
  let
    processDividend = do
      effectCid <- declareDividend operator registry issuer public equity today [Instrument.qty 0.5 usd]

      -- Claim registry holding
      (batchCid, instructionCids) <- claimEffect operator issuer registry public effectCid [registryEquityCid]
      allocateAndApprove operator issuer (head instructionCids) (Pledge issuerCashCid) (TakeDelivery registryCashAccount)
      submitMulti [issuer] [public] do exerciseCmd batchCid Batch.Settle

      -- Claim custodian holding
      (batchCid, instructionCids) <- claimEffect operator registry custodian public effectCid [toInterfaceContractId custodianEquityCid]
      allocateAndApprove operator registry (head instructionCids) (Pledge registryCashCid) (TakeDelivery custodianCashAccount)
      submitMulti [registry] [public] do exerciseCmd batchCid Batch.Settle

      -- Claim investor holdings
      (batchCid, instructionCids) <- claimEffect operator custodian alice public effectCid [toInterfaceContractId aliceEquityCid]
      allocateAndApprove operator custodian (head instructionCids) CreditReceiver (TakeDelivery aliceCashAccount)
      submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle
      (batchCid, instructionCids) <- claimEffect operator custodian bob public effectCid [toInterfaceContractId bobEquityCid]
      allocateAndApprove operator custodian (head instructionCids) CreditReceiver (TakeDelivery bobCashAccount)
      submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle
      (batchCid, instructionCids) <- claimEffect operator custodian charlie public effectCid [toInterfaceContractId charlieEquityCid]
      allocateAndApprove operator custodian (head instructionCids) CreditReceiver (TakeDelivery charlieCashAccount)
      submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle

      pure ()

  processDividend

  pure parties
