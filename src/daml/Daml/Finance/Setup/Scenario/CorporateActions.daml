-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.CorporateActions where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.List (head)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.App.Lifecycle.Service qualified as Lifecycle (Service, DeclareDividend(..))
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Instrument qualified as Equity (Instrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run = do
  let scenario = "Corporate Actions"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Issuer", "Custodian", "Alice", "Bob", "Charlie"]
  let
    [operator, public, centralBank, registry, issuer, custodian, alice, bob, charlie] = map (.id) parties
    pub = fromList [("Public", singleton $ singleton public)]

  -- Factories
  accountFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Settlement.Factory with provider = operator; observers = singleton public

  -- Roles
  createOperatorRole operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createCustodianRole operator issuer
  createCustodianRole operator custodian

  -- Services
  createCustodyService operator centralBank issuer    settlementFactoryCid
  createCustodyService operator centralBank registry  settlementFactoryCid
  createCustodyService operator centralBank custodian settlementFactoryCid
  createCustodyService operator issuer      registry  settlementFactoryCid
  createCustodyService operator registry    custodian settlementFactoryCid
  createCustodyService operator custodian   alice     settlementFactoryCid
  createCustodyService operator custodian   bob       settlementFactoryCid
  createCustodyService operator custodian   charlie   settlementFactoryCid
  createIssuanceService operator registry issuer
  createIssuanceAutoService operator registry issuer
  createStructuringService operator registry issuer
  createStructuringAutoService operator registry issuer
  createLifecycleService operator registry issuer public

  -- Accounts
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  issuerCashAccount     <- createAcc empty centralBank issuer    "Cash/Issuer@CentralBank"
  registryCashAccount   <- createAcc empty centralBank registry  "Cash/Registry@CentralBank"
  custodianCashAccount  <- createAcc empty centralBank custodian "Cash/Custodian@CentralBank"
  aliceCashAccount      <- createAcc empty custodian   alice     "Cash/Alice@Custodian"
  bobCashAccount        <- createAcc empty custodian   bob       "Cash/Bob@Custodian"
  charlieCashAccount    <- createAcc empty custodian   charlie   "Cash/Charlie@Custodian"
  registrySecAccount    <- createAcc empty issuer      registry  "Securities/Issuer@Registry"
  issuerSecAccount      <- createAcc empty registry    issuer    "Securities/Registry@Issuer"
  custodianSecAccount   <- createAcc empty registry    custodian "Securities/Custodian@Registry"
  aliceSecAccount       <- createAcc empty custodian   alice     "Securities/Alice@Custodian"
  bobSecAccount         <- createAcc empty custodian   bob       "Securities/Bob@Custodian"
  charlieSecAccount     <- createAcc empty custodian   charlie   "Securities/Charlie@Custodian"

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    tt d = time d 12 0 0
    epoch = tt $ date 1970 Jan 1
    (ty, tm, td) = toGregorian today
    clock = DateClock with u = Unit $ today, id = Id "Clock", provider = registry, observers = pub
  clockCid <- toInterfaceContractId @Clock.I <$> submitMulti [registry] [] do createCmd clock
  eventCid <- toInterfaceContractId @Event.I <$> submitMulti [registry] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Instruments
  usd    <- originate       centralBank centralBank pub epoch "USD"   "United States Dollar"
  equity <- originateEquity registry    issuer      pub epoch "NewCo" "NewCo, Inc. Common Stock"

  -- Distribution
  deposit operator issuer   registry  public (Instrument.qty 1_000_000.0 equity) registrySecAccount
  (_, equityHoldingCid) <- issue operator registry issuer public (Instrument.qty 1_000_000.0 equity) issuerSecAccount
  transfer issuer custodianSecAccount public $ coerceContractId equityHoldingCid
  deposit operator custodian alice   public (Instrument.qty 500_000.0 equity) aliceSecAccount
  deposit operator custodian bob     public (Instrument.qty 300_000.0 equity) bobSecAccount
  deposit operator custodian charlie public (Instrument.qty 200_000.0 equity) charlieSecAccount

  deposit operator centralBank issuer     public (Instrument.qty 500_000.0 usd) issuerCashAccount
  deposit operator centralBank registry   public (Instrument.qty 500_000.0 usd) registryCashAccount
  deposit operator centralBank custodian  public (Instrument.qty 500_000.0 usd) custodianCashAccount

  -- Workflows
  let
    declareDividend = do
      equityCid <- toInterfaceContractId . fst . head <$> query @Equity.Instrument issuer
      let
        newVersion = "1"
        id = Id "MyDiv"
        description = "My Dividend"
        effectiveDate = today
        perUnitDistribution = [ Instrument.qty 10.0 usd]
      submitMulti [issuer] [public] do exerciseByKeyCmd @Lifecycle.Service (operator, registry, issuer) Lifecycle.DeclareDividend with clockCid; equityCid; newVersion; id; description; effectiveDate; perUnitDistribution

  -- declareDividend

  pure parties
