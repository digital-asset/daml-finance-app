-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.StructuredNotes where

import ContingentClaims.Core.Builders (unrollDates)
import DA.Date (Month(..), addDays, date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.App.BackToBack.Service qualified as BackToBack
import Daml.Finance.App.Distribution.Subscription.Model qualified as Subscription
import Daml.Finance.App.Distribution.Subscription.Service qualified as Subscription
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Factory qualified as Holding (Factory(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Reference(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Finance.Setup.Payoff
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run  = do
  parties <- allocateParties "Structured Notes" ["Operator", "CashProvider", "Registrar", "Issuer", "RiskTaker", "Investor1", "Investor2", "Investor3"] "Public"
  let
    all@[operator, cashProvider, registrar, issuer, riskTaker, inv1, inv2, inv3, public] = map (.id) parties
    pub = fromList [("Public", singleton public)]

  -- Factories
  let
    assets = ["TSLA", "FWD1", "OPT1", "BOND1", "RC1", "BRC1", "BWN1", "BWN2"]
    cashSettlementPaths = [[issuer], [riskTaker], [inv1], [inv2], [inv3]]
    secSettlementPaths = [[issuer], [riskTaker], [inv1, issuer], [inv2, issuer], [inv3, issuer]]
    cashRoute = Settlement.Hierarchy with rootCustodian = cashProvider; pathsToRootCustodian = cashSettlementPaths
    secRoute = Settlement.Hierarchy with rootCustodian = riskTaker; pathsToRootCustodian = secSettlementPaths
    paths = fromList $ ("USD", cashRoute) :: map (\a -> (a, secRoute)) assets
  accountFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Account.Factory with provider = operator; observers = pub
  holdingFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Holding.Factory with id = Id "HoldingFactory"; provider = operator; observers = pub
  submit operator do createCmd HoldingFactory.Reference with factoryView = (HoldingFactory.View with provider = operator; id = Id "HoldingFactory"); cid = holdingFactoryCid; observers = pub

  -- Roles
  createOperatorRole    operator
  createCustodianRole   operator cashProvider
  createCustodianRole   operator issuer
  createCustodianRole   operator riskTaker
  createDistributorRole operator issuer

  -- Services
  createCustodyService            operator cashProvider  issuer    paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator cashProvider  riskTaker paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator cashProvider  inv1      paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator cashProvider  inv2      paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator cashProvider  inv3      paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator riskTaker    riskTaker paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator riskTaker    issuer    paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator issuer       issuer    paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator issuer       inv1      paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator issuer       inv2      paths accountFactoryCid holdingFactoryCid
  createCustodyService            operator issuer       inv3      paths accountFactoryCid holdingFactoryCid
  createStructuringService        operator issuer       issuer
  createIssuanceService           operator issuer       issuer
  createIssuanceService           operator riskTaker    riskTaker
  createBackToBackIssuanceService operator riskTaker    issuer    paths
  createLifecycleService          operator riskTaker    riskTaker public
  lcSvc <- createLifecycleService          operator issuer       issuer    public
  createSubscriptionService       operator issuer       issuer    paths

  -- Accounts
  riskTakerCashAccount  <- createAccount operator cashProvider  riskTaker  public "RiskTaker@CashProvider" $ fromList [("b2b", singleton issuer)]
  issuerCashAccount     <- createAccount operator cashProvider  issuer     public "Issuer@CashProvider"    empty
  inv1CashAccount       <- createAccount operator cashProvider  inv1       public "Investor1@CashProvider" empty
  inv2CashAccount       <- createAccount operator cashProvider  inv2       public "Investor2@CashProvider" empty
  inv3CashAccount       <- createAccount operator cashProvider  inv3       public "Investor3@CashProvider" empty
  issuerSecAccount      <- createAccount operator riskTaker    issuer     public "Issuer@RiskTaker"      empty
  inv1SecAccount        <- createAccount operator issuer       inv1       public "Investor1@Issuer"      empty
  inv2SecAccount        <- createAccount operator issuer       inv2       public "Investor2@Issuer"      empty
  inv3SecAccount        <- createAccount operator issuer       inv3       public "Investor3@Issuer"      empty
  issuerOwnAccount      <- createAccount operator issuer       issuer     public "Issuer@Issuer"         empty
  riskTakerOwnAccount   <- createAccount operator riskTaker    riskTaker  public "RiskTaker@RiskTaker"   $ fromList [("b2b", singleton issuer)]

  -- Time
  t <- getTime
  let
    epoch = time (date 1970 Jan 2) 0 0 0
    todayTime = time (date 2024 Jan 26) 0 0 0
    today = toDateUTC todayTime
    fixTime = time (date 2022 Jul 5) 0 0 0
    aaplFixTime = time (date 2023 Oct 24) 0 0 0
    aaplFixTime2 = time (date 2024 Jan 24) 0 0 0
    maturity = addDays today 365
    (todayYear, todayMonth, todayDay) = toGregorian today
  (_, timeEventCid) <- createClockAndEvent [issuer, riskTaker] today (singleton public)

  -- Observables
  let
    amd = "AMD"
    qc = "QUALCOMM"
    aapl = "AAPL"
    tslaO = "Close(TSLA)"
    libor3M = "LIB-USD-3M"
    libor6M = "LIB-USD-6M"

  -- Instruments
  usd     <- originateToken    cashProvider cashProvider pub todayTime "USD"    "United States Dollar"
  tsla    <- originateToken    registrar  issuer      pub todayTime "TSLA"   "Tesla, Inc. Common Stock"
  fwd     <- originateGeneric  registrar  issuer      pub todayTime "FWD1"   "Forward on TSLA"                       $ futureDvp tsla 200.0 usd 100_000.0 today
  opt     <- originateGeneric  registrar  issuer      pub todayTime "OPT1"   "Put Option on TSLA"                    $ putOptionCash tslaO usd 1_000.0 maturity
  bnd     <- originateGeneric  registrar  issuer      pub todayTime "BOND1"  "Bond 5Y/4.875%"                        $ bond usd 1.0 0.04875 $ unrollDates todayYear (todayYear + 4) [todayMonth] todayDay
  rc      <- originateGeneric  registrar  issuer      pub todayTime "RC1"    "Reverse Convertible on TSLA"           $ rc tslaO usd 0.02 800.0 $ unrollDates todayYear (todayYear + 4) [todayMonth] todayDay
  brc     <- originateGeneric  registrar  issuer      pub todayTime "BRC1"   "Barrier Reverse Convertible on TSLA"   $ brc tslaO usd 0.05 800.0 600.0 today $ unrollDates todayYear (todayYear + 4) [todayMonth] todayDay
  bwn1    <- originateGeneric  registrar  issuer      pub todayTime "BWN1"   "Synthetic Buy-Write Notes on AMD"      $ buyWriteNote (date 2022 Jul 16) (date 2023 Jul 19) (date 2023 Jul 23) amd usd 0.1776 91.6300 100.7930 -- Issue size: 77'300
  bwn2    <- originateGeneric  registrar  issuer      pub todayTime "BWN2"   "Synthetic Buy-Write Notes on QUALCOMM" $ buyWriteNote (date 2022 Jun 30) (date 2022 Jul 05) (date 2022 Jul 07) qc usd 0.1312 147.2566 161.9823
  ac1 <- originateAutocallable registrar issuer "AC1" "Autocallable 95%-Call 5%-Cpn on AAPL" pub epoch 1.0 usd (date 2023 Oct 24) (date 2023 Oct 26) ["EMPTY"] registrar (date 2024 Jan 24) (date 2024 Jan 26) (date 2024 Oct 24) (date 2024 Oct 26) Basis1 Following M 3 aapl 1.0 0.05 0.75 0.95 1.00
  ac2 <- originateAutocallable registrar issuer "AC2" "Autocallable 90%-Call 5%-Cpn on AAPL" pub epoch 1.0 usd (date 2023 Oct 24) (date 2023 Oct 26) ["EMPTY"] registrar (date 2024 Jan 24) (date 2024 Jan 26) (date 2024 Oct 24) (date 2024 Oct 26) Basis1 Following M 3 aapl 1.0 0.05 0.75 0.90 1.00
  let securities = [tsla, fwd, opt, bnd, rc, brc, bwn1, bwn2, ac1, ac2]

  -- Distribution
  -- issuerCashCid1  <- coerceContractId <$> deposit operator cashProvider issuer public (qty 4_417_698.0 usd) issuerCashAccount
  -- inv1CashCid1    <- coerceContractId <$> deposit operator cashProvider inv1   public (qty 1_472_566.0 usd) inv1CashAccount
  -- inv2CashCid1    <- coerceContractId <$> deposit operator cashProvider inv2   public (qty 1_472_566.0 usd) inv2CashAccount
  -- inv3CashCid1    <- coerceContractId <$> deposit operator cashProvider inv3   public (qty 1_472_566.0 usd) inv3CashAccount

  riskTakerCashCid2  <- coerceContractId <$> deposit operator cashProvider riskTaker public (qty 20_000_000.0 usd) riskTakerCashAccount
  issuerCashCid2  <- coerceContractId <$> deposit operator cashProvider issuer public (qty 20_000_000.0 usd) issuerCashAccount
  -- inv1CashCid2    <- coerceContractId <$> deposit operator cashProvider inv1   public (qty 950_000.0 usd) inv1CashAccount
  -- inv2CashCid2    <- coerceContractId <$> deposit operator cashProvider inv2   public (qty 950_000.0 usd) inv2CashAccount
  -- inv3CashCid2    <- coerceContractId <$> deposit operator cashProvider inv3   public (qty 950_000.0 usd) inv3CashAccount

  issuerSecCid <- coerceContractId <$> deposit operator riskTaker issuer public (qty 10_000_000.0 ac1) issuerSecAccount
  issuerSecCid <- coerceContractId <$> deposit operator riskTaker issuer public (qty 10_000_000.0 ac2) issuerSecAccount
  inv1SecCid <- coerceContractId <$> deposit operator issuer inv1 public (qty 10_000_000.0 ac1) inv1SecAccount
  inv2SecCid <- coerceContractId <$> deposit operator issuer inv2 public (qty 5_000_000.0 ac2) inv2SecAccount
  inv3SecCid <- coerceContractId <$> deposit operator issuer inv3 public (qty 5_000_000.0 ac2) inv3SecAccount

  -- Data
  createObservation issuer tslaO  [(todayTime, 580.0)]  pub
  createObservation issuer aapl  [(aaplFixTime, 173.44), (aaplFixTime2, 164.50)]  pub
  createObservation issuer qc     [(fixTime, 170.0)]    pub
  createCalendar registrar "EMPTY" [] [] pub
  createAccountDirectory riskTaker  ([(usd, riskTakerCashAccount)] <> map (\s -> (s, riskTakerOwnAccount)) securities)  $ singleton public
  createAccountDirectory issuer     ([(usd, issuerCashAccount)] <> map (\s -> (s, issuerSecAccount)) securities)        $ singleton public
  createAccountDirectory inv1       ([(usd, inv1CashAccount)] <> map (\s -> (s, inv1SecAccount)) securities)            $ singleton public
  createAccountDirectory inv2       ([(usd, inv2CashAccount)] <> map (\s -> (s, inv2SecAccount)) securities)            $ singleton public
  createAccountDirectory inv3       ([(usd, inv3CashAccount)] <> map (\s -> (s, inv3SecAccount)) securities)            $ singleton public

  -- Workflows
  let
    issuance quantity = do
      submitMulti [issuer] [public] do
        exerciseByKeyCmd @BackToBack.Service (operator, riskTaker, issuer) BackToBack.CreateIssuance
          with
            id = Id $ "ISSUANCE-" <> show quantity.unit.id
            description = "Issuance of " <> show quantity.amount <> " " <> show quantity.unit.id
            quantity
            customerAccount = issuerOwnAccount
            providerAccount = riskTakerOwnAccount

    subscription asset price issuerCashCid issuerAssetCid riskTakerAssetCid inv1CashCid inv2CashCid inv3CashCid = do
      offeringCid <- submit issuer do
        let
          offeringId = "OFFERING-" <> show asset.unit.id
          backToBack = Some Subscription.BackToBack
            with
              party = riskTaker
              offeringId
              issuerReceivableAccount = issuerSecAccount
              issuerDeliverableCid = issuerCashCid
              b2bReceivableAccount = riskTakerCashAccount
              b2bDeliverableCid = coerceContractId riskTakerAssetCid
        exerciseByKeyCmd @Subscription.Service (operator, issuer, issuer) Subscription.CreateOffering
          with
            offeringId
            asset
            price
            customerHoldingCid = coerceContractId issuerAssetCid
            customerAccount = issuerCashAccount
            backToBack
            observers = singleton public

      inv1SubscriptionCid   <- submitMulti [inv1] [public] do exerciseCmd offeringCid Subscription.Subscribe with investor = inv1; quantity = 10_000.0; investorHoldingCid = inv1CashCid; investorAccount = inv1SecAccount
      inv2SubscriptionCid     <- submitMulti [inv2] [public] do exerciseCmd offeringCid Subscription.Subscribe with investor = inv2; quantity = 10_000.0; investorHoldingCid = inv2CashCid; investorAccount = inv2SecAccount
      inv3SubscriptionCid <- submitMulti [inv3] [public] do exerciseCmd offeringCid Subscription.Subscribe with investor = inv3; quantity = 10_000.0; investorHoldingCid = inv3CashCid; investorAccount = inv3SecAccount

      submitMulti [issuer] [public] do
        exerciseByKeyCmd @Subscription.Service (operator, issuer, issuer) Subscription.ProcessOffering
          with
            offeringCid
            subscriptionCids = [inv1SubscriptionCid, inv2SubscriptionCid, inv3SubscriptionCid]
      pure ()

  -- (_, rcIssuerHoldingCid, rcRiskTakerHoldingCid) <- issuance $ qty 3_000_000.0 rc
  -- subscription (qty 3_000_000.0 rc) (qty 1.0 usd) issuerCashCid1 rcIssuerHoldingCid rcRiskTakerHoldingCid inv1CashCid1 inv2CashCid1 inv3CashCid1
  -- (_, brcIssuerHoldingCid, brcRiskTakerHoldingCid) <- issuance $ qty 3_000_000.0 brc
  -- subscription (qty 3_000_000.0 brc) (qty 1.0 usd) issuerCashCid2 brcIssuerHoldingCid brcRiskTakerHoldingCid inv1CashCid2 inv2CashCid2 inv3CashCid2
  -- (_, bwn1IssuerHoldingCid, bwn1RiskTakerHoldingCid) <- issuance $ qty 50_000.0 bwn1
  -- subscription (qty 50_000.0 bwn1) (qty 95.00 usd) issuerCashCid2 bwn1IssuerHoldingCid bwn1RiskTakerHoldingCid inv1CashCid2 inv2CashCid2 inv3CashCid2
  -- (_, bwn2IssuerHoldingCid, bwn2RiskTakerHoldingCid) <- issuance $ qty 44_000.0 bwn2
  -- subscription (qty 44_000.0 bwn2) (qty 147.2566 usd) issuerCashCid1 bwn2IssuerHoldingCid bwn2RiskTakerHoldingCid inv1CashCid1 inv2CashCid1 inv3CashCid1

  pure parties

