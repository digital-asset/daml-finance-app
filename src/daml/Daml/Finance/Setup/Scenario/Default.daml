-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.Default where

import ContingentClaims.Financial (unrollDates)
import DA.Date (DayOfWeek(Saturday, Sunday), Month(..), date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (HolidayCalendarData(..))
import Daml.Finance.RefData.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.RefData.Observation (Observation(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Setup.Payoff
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run  = do
  let scenario = "Default"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Exchange", "Agent", "Issuer", "Alice", "Bob", "Charlie"]
  let
    [operator, public, centralBank, registry, exchange, agent, issuer, alice, bob, charlie] = map (.id) parties
    pub = fromList [("Public", singleton $ singleton public)]

  -- Factories
  accountFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Settlement.Factory with provider = operator; observers = singleton public


  -- Roles
  createOperatorRole    operator
  createCustodianRole   operator centralBank
  createCustodianRole   operator registry
  createExchangeRole    operator exchange
  createDistributorRole operator agent

  -- Services
  createCustodyService          operator centralBank issuer   settlementFactoryCid
  createCustodyService          operator centralBank alice    settlementFactoryCid
  createCustodyService          operator centralBank bob      settlementFactoryCid
  createCustodyService          operator centralBank charlie  settlementFactoryCid
  createCustodyService          operator registry    issuer   settlementFactoryCid
  createCustodyService          operator registry    alice    settlementFactoryCid
  createCustodyService          operator registry    bob      settlementFactoryCid
  createCustodyService          operator registry    charlie  settlementFactoryCid
  createIssuanceService         operator registry    issuer
  createIssuanceAutoService     operator registry    issuer
  createStructuringService      operator registry    issuer
  createStructuringAutoService  operator registry    issuer
  createLifecycleService        operator registry    issuer   public
  createListingService          operator exchange    issuer
  createListingAutoService      operator exchange    issuer
  createTradingService          operator exchange    issuer   settlementFactoryCid
  createTradingAutoService      operator exchange    issuer
  createTradingService          operator exchange    alice    settlementFactoryCid
  createTradingAutoService      operator exchange    alice
  createTradingService          operator exchange    bob      settlementFactoryCid
  createTradingAutoService      operator exchange    bob
  createTradingService          operator exchange    charlie  settlementFactoryCid
  createTradingAutoService      operator exchange    charlie
  createAuctionService          operator agent       issuer
  createAuctionAutoService      operator agent       issuer
  createBiddingService          operator agent       alice
  createBiddingAutoService      operator agent       alice
  createBiddingService          operator agent       bob
  createBiddingAutoService      operator agent       bob
  createBiddingService          operator agent       charlie
  createBiddingAutoService      operator agent       charlie

  -- Accounts
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  issuerCashAccount      <- createAcc empty centralBank issuer "Issuer@CentralBank"
  aliceCashAccount       <- createAcc empty centralBank alice "Alice@CentralBank"
  bobCashAccount         <- createAcc empty centralBank bob "Bob@CentralBank"
  charlieCashAccount     <- createAcc empty centralBank charlie "Charlie@CentralBank"
  registrySecAccount     <- createAcc empty registry registry "Registry@Registry"
  issuerSecAccount       <- createAcc empty registry issuer "Issuer@Registry"
  aliceSecAccount        <- createAcc empty registry alice "Alice@Registry"
  bobSecAccount          <- createAcc empty registry bob "Bob@Registry"
  charlieSecAccount      <- createAcc empty registry charlie "Charlie@Registry"

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    (todayYear, todayMonth, todayDay) = toGregorian today
    clock = DateClock with u = Unit today, id = Id "Clock", provider = issuer, observers = pub
  submitMulti [issuer] [] do createCmd clock
  submitMulti [issuer] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Observables
  let
    libor3M = "USD-LIBOR-3M"
    libor6M = "USD-LIBOR-6M"
    amd = "AMD"
    qc = "QUALCOMM"
    tslaObs = "TSLA"

  -- Instruments
  usd     <- originate         centralBank centralBank pub todayTime "USD" "United States Dollar"
  tsla    <- originate         registry    issuer      pub todayTime "TSLA" "Tesla, Inc. Common Stock"
  nflx    <- originate         registry    issuer      pub todayTime "NFLX" "Netflix, Inc. Common Stock"
  dax     <- originate         registry    issuer      pub todayTime "DAX" "DAX Index"
  pmt     <- originateGeneric  registry    issuer      pub todayTime "PMT-USD"                  $ payment usd 10_000.0
  del     <- originateGeneric  registry    issuer      pub todayTime "DEL-TSLA"                 $ delivery tsla 20.0
  dvp     <- originateGeneric  registry    issuer      pub todayTime "DVP-TSLA-USD"             $ dvp tsla 20.0 usd 10_000.0
  fwd     <- originateGeneric  registry    issuer      pub todayTime "FWD-TSLA-USD-20221022"    $ futureDvp tsla 20.0 usd 10_000.0 today
  bnd     <- originateGeneric  registry    issuer      pub todayTime "BOND-USD-5Y-4.875%"       $ bond usd 1.0 0.04875 $ unrollDates todayYear (todayYear + 4) [todayMonth] todayDay
  swp     <- originateGeneric  registry    issuer      pub todayTime "SWAP-LIBOR-6M/0.25%"      $ interestRateSwap libor6M 0.0025 usd $ unrollDates todayYear (todayYear + 2) [todayMonth] todayDay
  bswp    <- originateGeneric  registry    issuer      pub todayTime "BSWAP-LIBOR-6M/3M+0.15%"  $ basisSwap libor3M libor6M 0.0015 usd $ unrollDates todayYear (todayYear + 2) [todayMonth] todayDay
  opt     <- originateGeneric  registry    issuer      pub todayTime "OPT-TSLA-USD-20221022-P"  $ callOptionPhysical tsla 20.0 usd 10_000.0 (date 2022 Oct 22)
  opt2    <- originateGeneric  registry    issuer      pub todayTime "OPT-TSLA-USD-20221022-C"  $ callOptionCashAuto tslaObs usd 700.0 (date 2022 Oct 22)

  -- Distribution
  aliceCashCid    <- coerceContractId <$> deposit operator centralBank alice   public (Instrument.qty 1_000_000.0 usd) aliceCashAccount
  bobCashCid      <- coerceContractId <$> deposit operator centralBank bob     public (Instrument.qty 1_000_000.0 usd) bobCashAccount
  charlieCashCid  <- coerceContractId <$> deposit operator centralBank charlie public (Instrument.qty 1_000_000.0 usd) charlieCashAccount

  (_, ad1) <- issue operator registry issuer public (Instrument.qty 1.0 fwd)           issuerSecAccount
  (_, ad2) <- issue operator registry issuer public (Instrument.qty 1_000_000.0 bnd)   issuerSecAccount
  (_, ad3) <- issue operator registry issuer public (Instrument.qty 10_000_000.0 swp)  issuerSecAccount
  (_, ad4) <- issue operator registry issuer public (Instrument.qty 10_000_000.0 bswp) issuerSecAccount

  -- Data
  let
    obs =
      [ Observation with provider = issuer; obsKey = libor3M; observations = fromList [(todayTime, 0.0018825)]; observers = pub
      , Observation with provider = issuer; obsKey = libor6M; observations = fromList [(todayTime, 0.0022363)]; observers = pub ]
    calendar = HolidayCalendarData with id = "FED"; weekend = [Saturday, Sunday]; holidays = []
  calendarCid <- submitMulti [issuer] [] do createCmd HolidayCalendar with agency = issuer; entity = calendar.id; calendar; observers = pub
  obsCids <- mapA (\f -> submitMulti [registry, issuer] [] do createCmd f) obs

  -- Workflows
  let
    doAuction = do
      let quantity = Instrument.qty 1_000_000.0 bnd
      auctionCid    <- createAuction    operator agent issuer  public "AUCTION1" quantity usd 0.95 (coerceContractId ad2) issuerCashAccount
      aliceCollateralCid    <- coerceContractId <$> getHolding alice   (Instrument.qty 500_000.0 usd)
      bobCollateralCid      <- coerceContractId <$> getHolding bob     (Instrument.qty 392_000.0 usd)
      charlieCollateralCid  <- coerceContractId <$> getHolding charlie (Instrument.qty 297_000.0 usd)
      aliceBidCid   <- createAuctionBid operator agent alice   public auctionCid 500_000.0 1.0  aliceCollateralCid aliceSecAccount
      bobBidCid     <- createAuctionBid operator agent bob     public auctionCid 400_000.0 0.98 bobCollateralCid bobSecAccount
      charlieBidCid <- createAuctionBid operator agent charlie public auctionCid 300_000.0 0.99 charlieCollateralCid charlieSecAccount
      processAuction operator agent issuer public auctionCid [aliceBidCid, bobBidCid, charlieBidCid]
      pure ()
    doTrade = do
      list operator exchange issuer "SWAP/USD" swp usd $ singleton public
      createAskOrder operator exchange issuer public "1" (Instrument.qty 250_000.0 swp) (Instrument.qty 0.80 usd) $ singleton public
      createAskOrder operator exchange issuer public "2" (Instrument.qty 250_000.0 swp) (Instrument.qty 0.90 usd) $ singleton public
      createBidOrder operator exchange alice  public "3" (Instrument.qty 500_000.0 swp) (Instrument.qty 0.90 usd) $ singleton public
      -- createAskOrder operator exchange issuer public "1" (Instrument.qty 250_000.0 swp) (Instrument.qty 0.80 usd) $ singleton public
      -- createAskOrder operator exchange issuer public "2" (Instrument.qty 250_000.0 swp) (Instrument.qty 0.90 usd) $ singleton public
      -- createBidOrder operator exchange alice  public "3" (Instrument.qty 500_000.0 swp) (Instrument.qty 0.90 usd) $ singleton public

  -- doAuction
  -- doTrade

  pure parties
