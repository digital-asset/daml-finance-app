-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.BondIssuance where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.Foldable (mapA_)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Bond.FixedRate qualified as FixedRateBond (Instrument)
import Daml.Finance.Instrument.Bond.FloatingRate qualified as FloatingRateBond (Instrument)
import Daml.Finance.Instrument.Bond.InflationLinked qualified as InflationLinkedBond (Instrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, getKey, qty)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Lifecycle.Observable qualified as Observable (I)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Lifecycle.Effect qualified as Lifecycle (Effect)
import Daml.Finance.RefData.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.RefData.Observation (Observation(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), DateClockUpdateEvent(..), Unit(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run = do
  let scenario = "Bond Issuance"
  parties <- allocateParties scenario ["Operator", "Public", "CentralBank", "Registry", "Issuer", "Custodian", "Alice", "Bob", "Charlie"]
  let
    [operator, public, centralBank, registry, issuer, custodian, alice, bob, charlie] = map (.id) parties
    pub = fromList [("Public", singleton $ singleton public)]

  -- Factories
  accountFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid    <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub
  settlementFactoryCid <- toInterfaceContractId <$> submit operator do createCmd Settlement.Factory with provider = operator; observers = singleton public

  -- Roles
  createOperatorRole operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createCustodianRole operator custodian

  -- Services
  createCustodyService          operator centralBank  issuer    settlementFactoryCid
  createCustodyService          operator centralBank  custodian settlementFactoryCid
  createCustodyService          operator registry     issuer    settlementFactoryCid
  createCustodyService          operator registry     custodian settlementFactoryCid
  createCustodyService          operator custodian    alice     settlementFactoryCid
  createCustodyService          operator custodian    bob       settlementFactoryCid
  createCustodyService          operator custodian    charlie   settlementFactoryCid
  createIssuanceService         operator registry     issuer
  createIssuanceAutoService     operator registry     issuer
  createStructuringService      operator registry     issuer
  createStructuringAutoService  operator registry     issuer
  createLifecycleService        operator registry     issuer    public

  -- Accounts
  let createAcc = createAccount [public] accountFactoryCid holdingFactoryCid
  issuerCashAccount      <- createAcc empty centralBank issuer    "Issuer@CentralBank/Cash"
  custodianCashAccount   <- createAcc empty centralBank custodian "Custodian@CentralBank/Cash"
  aliceCashAccount       <- createAcc empty custodian   alice     "Alice@Custodian/Cash"
  bobCashAccount         <- createAcc empty custodian   bob       "Bob@Custodian/Cash"
  charlieCashAccount     <- createAcc empty custodian   charlie   "Charlie@Custodian/Cash"
  issuerSecAccount       <- createAcc empty registry    issuer    "Issuer@Registry/Securties"
  custodianSecAccount    <- createAcc empty registry    custodian "Custodian@Registry/Securities"
  aliceSecAccount        <- createAcc empty custodian   alice     "Alice@Custodian/Securities"
  bobSecAccount          <- createAcc empty custodian   bob       "Bob@Custodian/Securities"
  charlieSecAccount      <- createAcc empty custodian   charlie   "Charlie@Custodian/Securities"

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 12 0 0
    tt d = time d 12 0 0
    epoch = tt $ date 1970 Jan 1
    (ty, tm, td) = toGregorian today
    clock = DateClock with u = Unit $ date 2021 tm td, id = Id "Clock", provider = registry, observers = pub
  clockCid <- toInterfaceContractId @Clock.I <$> submitMulti [registry] [] do createCmd clock
  eventCid <- toInterfaceContractId @Event.I <$> submitMulti [registry] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Instruments
  usd   <- originate centralBank centralBank pub epoch "USD" "United States Dollar"
  bond1 <- originateZeroCouponBond      registry issuer "BOND1" "ZERO-5Y"       pub (tt $ date 2022 tm td) (date 2022 tm td) (date 2027 Sep td) usd
  bond2 <- originateFixedRateBond       registry issuer "BOND2" "FIXED-5Y-1.1%" pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.011 M 12 usd
  bond3 <- originateFloatingRateBond    registry issuer "BOND3" "FLOAT-5Y-0.8%" pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.005 M 12 usd "USD-LIBOR-12M"
  bond4 <- originateInflationLinkedBond registry issuer "BOND4" "INFL-5Y-0.75%" pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.005 M 12 usd "CPI" 100.0

  -- Data
  let
    libor =
      [ (tt $ date 2020 tm td,   0.0010)
      , (tt $ date 2021 tm td,   0.0015)
      , (tt $ date 2022 tm td,   0.0020) ]
    cpi =
      [ (tt $ date 2021 tm td, 102.2500)
      , (tt $ date 2022 tm td, 104.5000) ]
    obs =
      [ Observation with provider = issuer; obsKey = "USD-LIBOR-12M"; observations = fromList libor; observers = pub
      , Observation with provider = issuer; obsKey = "CPI";           observations = fromList cpi; observers = pub ]
    calendar = HolidayCalendarData with id = "EMPTY"; weekend = []; holidays = []
  observableCids <- mapA (\f -> toInterfaceContractId @Observable.I <$> submitMulti [registry, issuer] [] do createCmd f) obs
  calendarCid <- submitMulti [registry] [] do createCmd HolidayCalendar with agency = registry; entity = calendar.id; calendar; observers = pub

  -- Lifecycle
  (bond2Cid, effectCids2) <- submitExerciseInterfaceByKeyCmd @Lifecycle.I [issuer] [public] bond2 Lifecycle.Evolve with ruleName = "Time"; settler = registry; eventCid; clockCid; observableCids
  (bond3Cid, effectCids3) <- submitExerciseInterfaceByKeyCmd @Lifecycle.I [issuer] [public] bond3 Lifecycle.Evolve with ruleName = "Time"; settler = registry; eventCid; clockCid; observableCids
  (bond4Cid, effectCids4) <- submitExerciseInterfaceByKeyCmd @Lifecycle.I [issuer] [public] bond4 Lifecycle.Evolve with ruleName = "Time"; settler = registry; eventCid; clockCid; observableCids
  mapA_ (\eCid -> submit issuer do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids2
  mapA_ (\eCid -> submit issuer do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids3
  mapA_ (\eCid -> submit issuer do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids4
  submit registry do archiveCmd $ fromInterfaceContractId @DateClock clockCid
  submit registry do archiveCmd $ fromInterfaceContractId @DateClockUpdateEvent eventCid

  let clock = DateClock with u = Unit today, id = Id "Clock", provider = registry, observers = pub
  clockCid <- toInterfaceContractId @Clock.I <$> submitMulti [registry] [] do createCmd clock
  eventCid <- toInterfaceContractId @Event.I <$> submitMulti [registry] [] do createCmd DateClockUpdateEvent with clock; id = Id $ "Update to " <> show today

  -- Distribution
  Some bond2I <- queryContractId issuer (coerceContractId bond2Cid : ContractId FixedRateBond.Instrument)
  Some bond3I <- queryContractId issuer (coerceContractId bond3Cid : ContractId FloatingRateBond.Instrument)
  Some bond4I <- queryContractId issuer (coerceContractId bond4Cid : ContractId InflationLinkedBond.Instrument)
  let
    bond2 = Instrument.getKey $ toInterface @Instrument.I bond2I
    bond3 = Instrument.getKey $ toInterface @Instrument.I bond3I
    bond4 = Instrument.getKey $ toInterface @Instrument.I bond4I
  (_, bond2HoldingCid) <- issue operator registry issuer public (Instrument.qty 100_000_000.0 bond2) issuerSecAccount
  (_, bond3HoldingCid) <- issue operator registry issuer public (Instrument.qty 100_000_000.0 bond3) issuerSecAccount
  (_, bond4HoldingCid) <- issue operator registry issuer public (Instrument.qty 100_000_000.0 bond4) issuerSecAccount

  transfer issuer custodianSecAccount public $ coerceContractId bond2HoldingCid
  transfer issuer custodianSecAccount public $ coerceContractId bond3HoldingCid
  transfer issuer custodianSecAccount public $ coerceContractId bond4HoldingCid

  deposit operator custodian alice   public (Instrument.qty 50_000_000.0 bond2) aliceSecAccount
  deposit operator custodian bob     public (Instrument.qty 30_000_000.0 bond2) bobSecAccount
  deposit operator custodian charlie public (Instrument.qty 20_000_000.0 bond2) charlieSecAccount
  deposit operator custodian alice   public (Instrument.qty 60_000_000.0 bond3) aliceSecAccount
  deposit operator custodian bob     public (Instrument.qty 30_000_000.0 bond3) bobSecAccount
  deposit operator custodian charlie public (Instrument.qty 10_000_000.0 bond3) charlieSecAccount
  deposit operator custodian alice   public (Instrument.qty 70_000_000.0 bond4) aliceSecAccount
  deposit operator custodian bob     public (Instrument.qty 20_000_000.0 bond4) bobSecAccount
  deposit operator custodian charlie public (Instrument.qty 10_000_000.0 bond4) charlieSecAccount

  deposit operator centralBank custodian public (Instrument.qty 120_000_000.0 usd) custodianCashAccount
  deposit operator custodian alice       public (Instrument.qty  50_000_000.0 usd) aliceCashAccount
  deposit operator custodian bob         public (Instrument.qty  40_000_000.0 usd) bobCashAccount
  deposit operator custodian charlie     public (Instrument.qty  30_000_000.0 usd) charlieCashAccount

  pure parties
