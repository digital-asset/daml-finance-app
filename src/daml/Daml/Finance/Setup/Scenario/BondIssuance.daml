-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.BondIssuance where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.Foldable (mapA_)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Claims.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Data.Time.DateClock qualified as Data (DateClock)
import Daml.Finance.Data.Time.DateClockUpdate qualified as Data (DateClockUpdateEvent)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Lifecycle.Effect qualified as Lifecycle (Effect)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run = do
  let scenario = "Bond Issuance"
  parties <- allocateParties scenario ["Operator", "CentralBank", "Registry", "Issuer", "Investor1", "Investor2", "Investor3"] "Public"
  let
    all@[operator, centralBank, registry, issuer, inv1, inv2, inv3, public] = map (.id) parties
    pub = fromList [("Public", singleton public <> singleton issuer)]

  -- Factories
  let
    assets = ["BOND1", "BOND2", "BOND3", "BOND4", "BOND5", "BOND6", "BOND7"]
    settlementPaths = [[issuer], [inv1], [inv2], [inv3]]
    cashRoute = Settlement.Hierarchy with rootCustodian = centralBank; pathsToRootCustodian = settlementPaths
    secRoute = Settlement.Hierarchy with rootCustodian = registry; pathsToRootCustodian = settlementPaths
    paths = fromList $ ("USD", cashRoute) :: map (\a -> (a, secRoute)) assets
  accountFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Account.Factory    with provider = operator; observers = pub
  holdingFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory   with provider = operator; observers = pub

  -- Roles
  createOperatorRole operator
  createCustodianRole operator centralBank
  createCustodianRole operator registry
  createDistributorRole operator registry
  createExchangeRole operator registry

  -- Services
  createCustodyService          operator centralBank  issuer    paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator centralBank  inv1      paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator centralBank  inv2      paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator centralBank  inv3      paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator registry     issuer    paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator registry     inv1      paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator registry     inv2      paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator registry     inv3      paths accountFactoryCid holdingFactoryCid
  createIssuanceService         operator registry     issuer
  createIssuanceAutoService     operator registry     issuer
  createStructuringService      operator registry     issuer
  createStructuringAutoService  operator registry     issuer
  createLifecycleService        operator registry     issuer    public
  createAuctionService          operator registry     issuer    paths
  createAuctionAutoService      operator registry     issuer
  createBiddingService          operator registry     inv1
  createBiddingAutoService      operator registry     inv1
  createBiddingService          operator registry     inv2
  createBiddingAutoService      operator registry     inv2
  createBiddingService          operator registry     inv3
  createBiddingAutoService      operator registry     inv3
  createListingService          operator registry    issuer
  createListingAutoService      operator registry    issuer
  createTradingService          operator registry    inv1   paths
  createTradingAutoService      operator registry    inv1
  createTradingService          operator registry    inv2   paths
  createTradingAutoService      operator registry    inv2
  createTradingService          operator registry    inv3   paths
  createTradingAutoService      operator registry    inv3

  -- Accounts
  issuerCashAccount     <- createAccount operator centralBank issuer    public "Issuer@CentralBank/Cash"        empty
  inv1CashAccount       <- createAccount operator centralBank inv1      public "Investor1@CentralBank/Cash"     empty
  inv2CashAccount       <- createAccount operator centralBank inv2      public "Investor2@CentralBank/Cash"     empty
  inv3CashAccount       <- createAccount operator centralBank inv3      public "Investor3@CentralBank/Cash"     empty
  issuerSecAccount      <- createAccount operator registry    issuer    public "Issuer@Registry/Securties"      empty
  inv1SecAccount        <- createAccount operator registry    inv1      public "Investor1@Registry/Securities"  empty
  inv2SecAccount        <- createAccount operator registry    inv2      public "Investor2@Registry/Securities"  empty
  inv3SecAccount        <- createAccount operator registry    inv3      public "Investor3@Registry/Securities"  empty

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 0 0 0
    tt d = time d 0 0 0
    epoch = tt $ date 1970 Jan 1
    (ty, tm, td) = toGregorian today
  (timeObservableCid, eventCid) <- createClockAndEvent all (date 2021 tm td) (singleton public)

  -- Instruments
  usd   <- originateToken               centralBank centralBank pub epoch "USD"   "United States Dollar"
  bond1 <- originateZeroCouponBond      registry    issuer                "BOND1" "Zero Coupon Bond 5Y"                         pub (tt $ date 2022 tm td) (date 2022 tm td) (date 2027 tm td) usd
  bond2 <- originateFixedRateBond       registry    issuer                "BOND2" "Fixed Rate Bond 5Y @ 1.1%"                   pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.011 M 12 usd
  bond3 <- originateFloatingRateBond    registry    issuer                "BOND3" "Floating Rate Bond 5Y @ LIBOR-12M + 0.5%"    pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.005 M 12 usd "USD-LIBOR-12M"
  bond4 <- originateInflationLinkedBond registry    issuer                "BOND4" "Inflation Linked Bond 5Y @ 0.5% * (1 + CPI)" pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] registry (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.005 M 12 usd "CPI" 100.0
  let
    bond5 = InstrumentKey with depository = registry; issuer; id = Id "BOND5"; version = "0"
    bond6 = InstrumentKey with depository = registry; issuer; id = Id "BOND6"; version = "0"
    bond7 = InstrumentKey with depository = registry; issuer; id = Id "BOND7"; version = "0"
    securities = [bond1, bond2, bond3, bond4, bond5, bond6, bond7]

  -- Data
  let
    libor =
      [ (tt $ date 2020 tm td,   0.0010)
      , (tt $ date 2021 tm td,   0.0015)
      , (tt $ date 2022 tm td,   0.0020)
      , (tt $ date 2023 tm td,   0.0025) ]
    cpi =
      [ (tt $ date 2021 tm td, 102.2500)
      , (tt $ date 2022 tm td, 103.0000)
      , (tt $ date 2022 tm td, 104.5000) ]
  obsCid1 <- createObservation issuer "USD-LIBOR-12M"  libor pub
  obsCid2 <- createObservation issuer "CPI"            cpi   pub
  createCalendar registry "EMPTY" [] [] pub
  createCalendar registry "FED" [] [] pub
  createAccountDirectory issuer     ([(usd, issuerCashAccount)] <> map (\s -> (s, issuerSecAccount)) securities)        $ singleton public
  createAccountDirectory inv1       ([(usd, inv1CashAccount)] <> map (\s -> (s, inv1SecAccount)) securities)            $ singleton public
  createAccountDirectory inv2       ([(usd, inv2CashAccount)] <> map (\s -> (s, inv2SecAccount)) securities)            $ singleton public
  createAccountDirectory inv3       ([(usd, inv3CashAccount)] <> map (\s -> (s, inv3SecAccount)) securities)            $ singleton public

  -- Lifecycle
  lifecycleCid <- toInterfaceContractId @Lifecycle.I <$> submit operator do createCmd Lifecycle.Rule with providers = singleton operator; lifecycler = issuer; observers = pub; id = Id "LC-RULE"; description = "Dynamic instrument lifecycle rule"
  (Some bond2, effectCids2) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond2; observableCids = [obsCid1, obsCid2]
  (Some bond3, effectCids3) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond3; observableCids = [obsCid1, obsCid2]
  (Some bond4, effectCids4) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond4; observableCids = [obsCid1, obsCid2]
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids2
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids3
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids4
  submitMulti all [] do archiveCmd $ fromInterfaceContractId @Data.DateClock timeObservableCid
  submitMulti all [] do archiveCmd $ fromInterfaceContractId @Data.DateClockUpdateEvent eventCid
  (timeObservableCid, eventCid) <- createClockAndEvent all (date 2022 tm td) (singleton public)

  (Some bond2, effectCids2) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond2; observableCids = [obsCid1, obsCid2]
  (Some bond3, effectCids3) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond3; observableCids = [obsCid1, obsCid2]
  (Some bond4, effectCids4) <- submitMulti [issuer] [public] do exerciseCmd lifecycleCid Lifecycle.Evolve with eventCid; instrument = bond4; observableCids = [obsCid1, obsCid2]
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids2
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids3
  mapA_ (\eCid -> submitMulti [registry, issuer] [] do archiveCmd $ fromInterfaceContractId @Lifecycle.Effect eCid) effectCids4
  submitMulti all [] do archiveCmd $ fromInterfaceContractId @Data.DateClock timeObservableCid
  submitMulti all [] do archiveCmd $ fromInterfaceContractId @Data.DateClockUpdateEvent eventCid
  (timeObservableCid, eventCid) <- createClockAndEvent all today (singleton public)

  -- Distribution
  -- (_, bond2HoldingCid) <- issue operator registry issuer public (qty 100_000_000.0 bond2) issuerSecAccount
  -- (_, bond3HoldingCid) <- issue operator registry issuer public (qty 100_000_000.0 bond3) issuerSecAccount
  -- (_, bond4HoldingCid) <- issue operator registry issuer public (qty 100_000_000.0 bond4) issuerSecAccount

  -- transfer issuer custodianSecAccount public $ coerceContractId bond2HoldingCid
  -- transfer issuer custodianSecAccount public $ coerceContractId bond3HoldingCid
  -- transfer issuer custodianSecAccount public $ coerceContractId bond4HoldingCid

  -- deposit operator custodian inv1 public (qty 50_000_000.0 bond2) inv1SecAccount
  -- deposit operator custodian inv2 public (qty 30_000_000.0 bond2) inv2SecAccount
  -- deposit operator custodian inv3 public (qty 20_000_000.0 bond2) inv3SecAccount
  -- deposit operator custodian inv1 public (qty 60_000_000.0 bond3) inv1SecAccount
  -- deposit operator custodian inv2 public (qty 30_000_000.0 bond3) inv2SecAccount
  -- deposit operator custodian inv3 public (qty 10_000_000.0 bond3) inv3SecAccount
  -- deposit operator custodian inv1 public (qty 70_000_000.0 bond4) inv1SecAccount
  -- deposit operator custodian inv2 public (qty 20_000_000.0 bond4) inv2SecAccount
  -- deposit operator custodian inv3 public (qty 10_000_000.0 bond4) inv3SecAccount

  -- deposit operator centralBank  registry  public (qty 120_000_000.0 usd) registryCashAccount
  deposit operator centralBank  inv1      public (qty  50_000_000.0 usd) inv1CashAccount
  deposit operator centralBank  inv2      public (qty  40_000_000.0 usd) inv2CashAccount
  deposit operator centralBank  inv3      public (qty  30_000_000.0 usd) inv3CashAccount

  pure parties
