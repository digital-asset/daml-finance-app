-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Setup.Scenario.OtcSwaps where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Finance.Setup.Util.Common
import Daml.Finance.Setup.Util.Role
import Daml.Finance.Setup.Util.Service
import Daml.Finance.Setup.Util.Workflow
import Daml.Script

run : Script [PartyInfo]
run = do
  let scenario = "OTC Swaps"
  parties <- allocateParties scenario ["Operator", "CashProvider", "Clearer", "Seller", "Buyer"] "Public"
  let
    all@[operator, cashProvider, clearer, seller, buyer, public] = map (.id) parties
    pub = fromList [("Public", singleton public)]

  -- Factories
  let
    cashSettlementPaths = [[buyer], [seller]]
    securitySettlementPaths = [[buyer]]
    cashRoute = Settlement.Hierarchy with rootCustodian = cashProvider; pathsToRootCustodian = cashSettlementPaths
    secRoute = Settlement.Hierarchy with rootCustodian = seller; pathsToRootCustodian = securitySettlementPaths
    paths = fromList [("USD", cashRoute), ("CDS1", secRoute)]
  accountFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Account.Factory                   with provider = operator; observers = pub
  holdingFactoryCid         <- toInterfaceContractId <$> submit operator do createCmd Fungible.Factory                  with provider = operator; observers = pub

  -- Roles
  createOperatorRole operator
  createCustodianRole operator cashProvider
  createCustodianRole operator seller
  createExchangeRole operator clearer
  createExchangeRole operator seller

  -- Services
  createCustodyService          operator cashProvider seller  paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator cashProvider buyer   paths accountFactoryCid holdingFactoryCid
  createCustodyService          operator seller       buyer   paths accountFactoryCid holdingFactoryCid
  createIssuanceService         operator seller       seller
  createIssuanceAutoService     operator seller       seller
  createStructuringService      operator seller       seller
  createStructuringAutoService  operator seller       seller
  createLifecycleService        operator seller       seller  public
  createSettlementService       operator seller       buyer   paths
  createQuotingService          operator seller       buyer
  createClearingService         operator clearer      buyer
  createClearingService         operator clearer      seller

  -- Accounts
  sellerCashAccount <- createAccount operator cashProvider seller  public "Seller@CashProvider/Cash" empty
  buyerCashAccount  <- createAccount operator cashProvider buyer   public "Buyer@CashProvider/Cash"  empty
  buyerSecAccount   <- createAccount operator seller       buyer   public "Buyer@Seller/Securties"   empty

  -- Time
  t <- getTime
  let
    today = toDateUTC t
    todayTime = time today 0 0 0
    tt d = time d 0 0 0
    epoch = tt $ date 1970 Jan 1
    (ty, tm, td) = toGregorian today
  (clockCid, eventCid) <- createClockAndEvent all (date 2021 tm td) (singleton public)

  -- Instruments
  usd   <- originateToken               cashProvider cashProvider pub epoch "USD"   "United States Dollar"
  swap1 <- originateCreditDefaultSwap   seller       seller                 "CDS1"  "Credit Default Swap 5Y"  pub (tt $ date 2020 tm td) (date 2020 tm td) ["EMPTY"] seller (date 2021 tm td) (date 2025 tm td) Act365Fixed Following 0.011 M 12 usd "DefaultProbability" "RecoveryRate" True

  -- Distribution
  buyerCashCid <- deposit operator cashProvider buyer public (qty 1_000_000.0 usd) buyerCashAccount

  -- Data
  createAccountDirectory buyer [(usd, buyerCashAccount), (swap1, buyerSecAccount)] $ singleton public
  createAccountDirectory seller [(usd, sellerCashAccount)] $ singleton public

  pure parties
