module Daml.Finance.Instrument.PrivateEquity.Instrument where

import DA.Set (fromList, singleton)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareDividend(..), DeclareReplacement(..), DeclareStockSplit(..), HasImplementation, I, View(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentQuantity, Id, InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event(..))
import Daml.Finance.Lifecycle.Event.Replacement qualified as Replacement (Event(..))
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Equity.HasImplementation T

-- | An Instrument representing a common stock.
template Instrument
  with
    issuer : Party
      -- ^ Issuer.
    depository : Party
      -- ^ Depository.
    id : Id
      -- ^ A textual identifier.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    observers : PartiesMap
      -- ^ Observers.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp
      --   of the event that creates the instrument. It usually does not coincide with ledger time.

    callInstrument: InstrumentKey 
    called: Numeric 10 
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with issuer; depository; id; version; description; validAsOf
      getKey = instrument

    interface instance Equity.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = Equity.View with instrument
      declareDividend
        Equity.DeclareDividend{id; description; effectiveTime; newInstrument; perUnitDistribution} =
          toInterfaceContractId <$>
            create Distribution.Event with
              providers = fromList [issuer, depository]
              id
              description
              effectiveTime
              targetInstrument = instrument
              newInstrument
              perUnitDistribution
              observers = Disclosure.flattenObservers observers
      declareStockSplit
        Equity.DeclareStockSplit{id; description; adjustmentFactor; newInstrument;
          effectiveTime} = do
            -- An adjusmentFactor between 0 and 1 represents a classic stock split (e.g. 2-for-1 or
            -- two new for one old).
            -- A factor above 1 represents a reverse stock split (e.g. 1-for-2 or one new for two
            -- old).
            assertMsg "Factor must be greater than zero" $ adjustmentFactor > 0.0
            toInterfaceContractId <$>
              -- NOTE: Doesn't handle conversion of fractional shares into cash
              create Replacement.Event with
                providers = fromList [issuer, depository]
                id
                description
                effectiveTime
                targetInstrument = instrument
                perUnitReplacement = [qty (1.0 / adjustmentFactor) newInstrument]
                observers = Disclosure.flattenObservers observers
      declareReplacement
        Equity.DeclareReplacement{id; description; effectiveTime; perUnitReplacement} =
          toInterfaceContractId <$>
            create Replacement.Event with
              providers = fromList [issuer, depository]
              id
              description
              effectiveTime
              targetInstrument = instrument
              perUnitReplacement
              observers = Disclosure.flattenObservers observers

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)