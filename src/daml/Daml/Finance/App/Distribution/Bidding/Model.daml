-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Bidding.Model where

import DA.Set (fromList, singleton)
import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, View(..))
import Daml.Finance.App.Interface.Distribution.Bidding.Bid qualified as Bid (AllocateInstruction(..), ApproveInstruction(..), Details, I, Status, UpdateStatus(..), View(..))
import Daml.Finance.App.Interface.Distribution.Bidding.CreateBidRequest qualified as CreateBidRequest (I, View(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types qualified as T (Allocation(Pledge), Approval(TakeDelivery))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)

template CreateBidRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuer : Party
    auctionId : Id
    quantity : InstrumentQuantity
    price : InstrumentQuantity
    collateralCid : ContractId Fungible.I
    receivableAccount : AccountKey
  where
    signatory operator, provider, customer

    interface instance Removable.I for CreateBidRequest where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance CreateBidRequest.I for CreateBidRequest where
      view = CreateBidRequest.View with operator; provider; customer; issuer; auctionId; quantity; price; collateralCid; receivableAccount
      asRemovable = toInterface @Removable.I this

template Bid
  with
    operator : Party
    provider : Party
    customer : Party
    issuer : Party
    details : Bid.Details
    auctionId : Id
    collateralCid : ContractId Fungible.I
    receivableAccount : AccountKey
    status : Bid.Status
  where
    signatory operator, provider, customer
    observer issuer
    ensure details.quantity.amount > 0.0

    interface instance Removable.I for Bid where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance Bid.I for Bid where
      view = Bid.View with operator; provider; customer; issuer; details; auctionId; collateralCid; receivableAccount; status
      asRemovable = toInterface @Removable.I this
      updateStatus Bid.UpdateStatus{newStatus} = do
        toInterfaceContractId <$> create this with status = newStatus
      approveInstruction Bid.ApproveInstruction{instructionCid; account} = do
        -- TODO: Assert instruction is for the right auction
        exercise instructionCid Instruction.Approve with actors = singleton customer; approval = T.TakeDelivery account
      allocateInstruction Bid.AllocateInstruction{instructionCid; holdingCid} = do
        -- TODO: Assert instruction is for the right auction
        fst <$> exercise instructionCid Instruction.Allocate with actors = singleton customer; allocation = T.Pledge $ toInterfaceContractId holdingCid
