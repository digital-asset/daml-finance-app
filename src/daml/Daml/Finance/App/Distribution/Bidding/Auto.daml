-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Bidding.Auto where

import Daml.Finance.App.Distribution.Bidding.Service qualified as Service (T)
import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Distribution.Bidding.Auto qualified as Auto (I, HasImplementation, RequestAndCreateBid(..), View(..))
import Daml.Finance.App.Interface.Distribution.Bidding.Service qualified as Service (I, CreateBid(..), RequestCreateBid(..))

type T = Service

instance Auto.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer
      terminate = pure ()

    interface instance Auto.I for Service where
      view = Auto.View
      asBase = toInterface @Base.I this
      requestAndCreateBid Auto.RequestAndCreateBid{auctionCid; amount; price; collateralCid; receivableAccount} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createBidRequestCid <- exercise serviceCid Service.RequestCreateBid with auctionCid; amount; price; collateralCid; receivableAccount
        exercise serviceCid Service.CreateBid with createBidRequestCid

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
