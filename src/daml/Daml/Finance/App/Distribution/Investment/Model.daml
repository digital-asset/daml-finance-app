-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Investment.Model where

import DA.Set (fromList, singleton)
import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, View(..))
import Daml.Finance.App.Interface.Distribution.Investment.InvestmentRequest qualified as InvestmentRequest (AllocateInstruction(..), ApproveInstruction(..), HasImplementation, I, View(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(Pledge), Approval(TakeDelivery))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)

instance InvestmentRequest.HasImplementation InvestmentRequest

template InvestmentRequest
  with
    operator : Party
    provider : Party
    customer : Party
    manager : Party
    requestId : Id
    asOfDate : Date
    fundId : Id
    quantity : InstrumentQuantity
    cashCid : ContractId Transferable.I
    customerFundAccount : AccountKey
  where
    signatory operator, provider, customer
    observer manager

    interface instance Removable.I for InvestmentRequest where
      view = Removable.View with removers = fromList [operator, provider]

    interface instance InvestmentRequest.I for InvestmentRequest where
      view = InvestmentRequest.View with operator; provider; customer; manager; requestId; asOfDate; fundId; quantity; cashCid; customerFundAccount

      asRemovable = toInterface @Removable.I this

      allocateInstruction InvestmentRequest.AllocateInstruction{instructionCid} = do
        fst <$> exercise instructionCid Instruction.Allocate with actors = singleton customer; allocation = Pledge $ toInterfaceContractId cashCid

      approveInstruction InvestmentRequest.ApproveInstruction{instructionCid} = do
          exercise instructionCid Instruction.Approve with actors = singleton customer; approval = TakeDelivery customerFundAccount
