-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Subscription.Model where

import DA.Set (fromList, singleton)
import Daml.Finance.Interface.Account.Account qualified as Account (R)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Holding.Base qualified as Holding (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(Pledge), Approval(TakeDelivery))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentQuantity, Parties)

data Status
    = Open
    | Closed
  deriving (Eq, Show)

data BackToBack = BackToBack
  with
    party : Party
    offeringId : Text
    issuerReceivableAccount : AccountKey
    issuerDeliverableCid : ContractId Fungible.I
    b2bReceivableAccount : AccountKey
    b2bDeliverableCid : ContractId Fungible.I
  deriving (Eq, Show)

template Offering
  with
    operator : Party
    provider : Party
    issuer : Party
    offeringId : Text
    asset : InstrumentQuantity
    price : InstrumentQuantity
    issuerHoldingCid : ContractId Fungible.I
    issuerAccount : AccountKey
    backToBack : Optional BackToBack
    status : Status
    observers : Parties
  where
    signatory operator, provider, issuer
    observer observers

    key (provider, offeringId) : (Party, Text)
    maintainer key._1

    nonconsuming choice Subscribe : ContractId Subscription
      with
        investor : Party
        quantity : Decimal
        investorHoldingCid : ContractId Fungible.I
        investorAccount : AccountKey
      controller investor
      do
        -- Disclose holding
        investorHolding <- fetch investorHoldingCid
        investorHoldingCid : ContractId Fungible.I <- coerceContractId <$> exercise (coerceContractId investorHoldingCid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
        -- Disclose delivering securities account
        let investorSendingAccount = getAccount investorHolding
        (_, delRef) <- fetchByKey @Account.R investorSendingAccount
        exercise (coerceContractId delRef.cid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
        -- Disclose receiving cash account
        (_, recRef) <- fetchByKey @Account.R investorAccount
        exercise (coerceContractId recRef.cid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
        -- Lock holding
        investorHoldingCid <- coerceContractId <$> exercise (toInterfaceContractId investorHoldingCid : ContractId Holding.I) Holding.Acquire with newLockers = singleton issuer; context = offeringId; lockType = Holding.Semaphore
        create Subscription with holdingCid = investorHoldingCid; accountKey = investorAccount; ..

template Subscription
  with
    operator : Party
    provider : Party
    issuer : Party
    investor : Party
    offeringId : Text
    quantity : Decimal
    holdingCid : ContractId Fungible.I
    accountKey : AccountKey
  where
    signatory operator, provider, issuer, investor

    nonconsuming choice ApproveInstruction : ContractId Instruction.I
      with
        instructionCid : ContractId Instruction.I
        receiverAccount : AccountKey
      controller provider
      do
        exercise instructionCid Instruction.Approve with actors = fromList [provider, investor]; approval = TakeDelivery receiverAccount

    nonconsuming choice AllocateInstruction : ContractId Instruction.I
      with
        instructionCid : ContractId Instruction.I
        transferableCid : ContractId Transferable.I
      controller provider
      do
        fst <$> exercise instructionCid Instruction.Allocate with actors = fromList [provider, investor]; allocation = Pledge $ toInterfaceContractId transferableCid

    nonconsuming choice UnlockHolding : ContractId Holding.I
      with
        lockableCid : ContractId Holding.I
      controller provider
      do
        exercise lockableCid Holding.Release with context = offeringId
