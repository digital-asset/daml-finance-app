-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.PEDistribution.Model where

import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentKey, InstrumentQuantity, Parties)

type T = PEDistribution

data Status
    = Open
    | PartiallyAllocated with
        finalPrice : Decimal
        remaining : Decimal
    | FullyAllocated with
        finalPrice : Decimal
    | NoValidBids
  deriving (Eq, Show)

template PEDistribution
  with
    operator : Party
    provider : Party
    customer : Party
    id : Text
    quantity : InstrumentQuantity
    currency : InstrumentKey
    floor : Decimal
    collateralCid : ContractId Fungible.I
    receivableAccount : AccountKey
    status : Status
    observers : Parties
  where
    signatory operator, provider, customer
    observer observers

    ensure quantity.amount > 0.0

    key (operator, provider, id) : (Party, Party, Text)
    maintainer key._1

    nonconsuming choice Fetch : PEDistribution
      with
        actor : Party
      controller actor
      do
        pure this

    -- nonconsuming choice Subscribe : ContractId Subscription
    --   with
    --     investor : Party
    --     quantity : Decimal
    --     investorHoldingCid : ContractId Fungible.I
    --     investorAccount : AccountKey
    --   controller investor
    --   do
    --     -- Disclose holding
    --     investorHolding <- fetch investorHoldingCid
    --     investorHoldingCid : ContractId Fungible.I <- coerceContractId <$> exercise (coerceContractId investorHoldingCid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
    --     -- Disclose delivering securities account
    --     let investorSendingAccount = getAccount investorHolding
    --     (_, delRef) <- fetchByKey @Account.R investorSendingAccount
    --     exercise (coerceContractId delRef.cid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
    --     -- Disclose receiving cash account
    --     (_, recRef) <- fetchByKey @Account.R investorAccount
    --     exercise (coerceContractId recRef.cid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton investor; observersToAdd = (offeringId, singleton issuer)
    --     -- Lock holding
    --     investorHoldingCid <- coerceContractId <$> exercise (toInterfaceContractId investorHoldingCid : ContractId Holding.I) Holding.Acquire with newLockers = singleton issuer; context = offeringId; lockType = Holding.Semaphore
    --     create Subscription with holdingCid = investorHoldingCid; accountKey = investorAccount; ..

template Subscription
  with
    operator : Party
    provider : Party
    issuer : Party
    investor : Party
    offeringId : Text
    quantity : Decimal
    holdingCid : ContractId Fungible.I
    accountKey : AccountKey
  where
    signatory operator, provider, issuer, investor

--     nonconsuming choice ApproveInstruction : ContractId Instruction.I
--       with
--         instructionCid : ContractId Instruction.I
--         receiverAccount : AccountKey
--       controller provider
--       do
--         exercise instructionCid Instruction.Approve with actors = fromList [provider, investor]; approval = TakeDelivery receiverAccount

--     nonconsuming choice AllocateInstruction : ContractId Instruction.I
--       with
--         instructionCid : ContractId Instruction.I
--         transferableCid : ContractId Transferable.I
--       controller provider
--       do
--         fst <$> exercise instructionCid Instruction.Allocate with actors = fromList [provider, investor]; allocation = Pledge $ toInterfaceContractId transferableCid

--     nonconsuming choice UnlockHolding : ContractId Holding.I
--       with
--         lockableCid : ContractId Holding.I
--       controller provider
--       do
--         exercise lockableCid Holding.Release with context = offeringId


template CreatePEDistributionRequest
  with
    operator : Party
    provider : Party
    customer : Party
    id : Text
    quantity : InstrumentQuantity
    currency : InstrumentKey
    floor : Decimal
    collateralCid : ContractId Fungible.I
    receivableAccount : AccountKey
    observers : Parties
  where
    signatory operator, provider, customer
