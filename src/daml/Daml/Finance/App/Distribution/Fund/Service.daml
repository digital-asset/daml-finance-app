-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Fund.Service where

import DA.Foldable (mapA_)
import DA.List (dedup)
import DA.Map qualified as M (lookup)
import DA.Optional (fromSome)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.App.Data.AccountDirectory (AccountDirectory)
import Daml.Finance.App.Distribution.Fund.Model qualified as Fund (ApproveInstruction(..), GetFund(..), IssueUnits(..), PooledInvestmentRequest(..), Remove(..), T)
import Daml.Finance.App.Distribution.Investment.Model (AllocateInstruction(..), ApproveInstruction(..), Delete(..), InvestmentRequest(..))
import Daml.Finance.Interface.Data.NumericObservable qualified as NumericObservable (I, Observe(..))
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (Factory, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I)

type S = Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice PoolInvestmentRequests : ContractId Fund.PooledInvestmentRequest
      with
        requestId : Id
        asOfDate : Date
        fundCid : ContractId Fund.T
        cashCid : ContractId Transferable.I
        investmentRequestCids : [ContractId InvestmentRequest]
      controller customer
      do
        fund <- exercise fundCid Fund.GetFund with actor = customer
        irs <- mapA fetch investmentRequestCids
        (_, dir) <- fetchByKey @AccountDirectory customer

        -- Disclose cash to provider
        cashCid : ContractId Transferable.I <- coerceContractId <$> exercise (coerceContractId cashCid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton customer; observersToAdd = (show requestId, singleton provider)
        -- cash <- fetch cashCid
        -- Account.disclose (show requestId, singleton provider) customer (singleton customer) $ getAccount cash

        let
          [currency] = dedup $ map (.quantity.unit) irs
          [fundId] = dedup $ map (.fundId) irs
          [asOfDate] = dedup $ map (.asOfDate) irs
          total = sum $ map (.quantity.amount) irs
          quantity = Instrument.qty total currency
          customerFundAccount = fromSome $ M.lookup fund.instrument.id dir.accounts
        create Fund.PooledInvestmentRequest with operator; provider; customer; requestId; asOfDate; fundId; quantity; cashCid; investmentRequestCids; customerFundAccount

    nonconsuming choice FulfillPooledInvestmentRequest : [ContractId Holding.I]
      with
        pooledInvestmentRequestCid : ContractId Fund.PooledInvestmentRequest
        fundCid : ContractId Fund.T
        navObservableCid : ContractId NumericObservable.I
        settlementFactoryCid : ContractId Settlement.Factory
      controller provider
      do
        pir <- fetch pooledInvestmentRequestCid
        fund <- fetch fundCid

        -- Calculate nr of units to issue
        nav <- exercise navObservableCid NumericObservable.Observe with actors = singleton customer; t = time pir.asOfDate 0 0 0
        let
          unitValue = nav / fund.totalUnits
          nrUnits = pir.quantity.amount / unitValue
          fundQty = Instrument.qty nrUnits fund.instrument

        -- Issue units
        (_, fundUnitsCid, fundCid) <- exercise fundCid Fund.IssueUnits with requestId = pir.requestId; quantity = fundQty

        -- Instruct settlement
        irs <- mapA fetch pir.investmentRequestCids
        let
          createInvestorCashStep ir = Step with sender = ir.customer; receiver = ir.provider; quantity = ir.quantity
          createInvestorFundStep ir = Step with sender = ir.provider; receiver = ir.customer; quantity = Instrument.qty (ir.quantity.amount / unitValue) fund.instrument
          custodianCashStep = Step with sender = pir.customer; receiver = fund.custodian; quantity = pir.quantity
          managerFundStep = Step with sender = provider; receiver = pir.customer; quantity = fundQty
          steps = custodianCashStep :: managerFundStep :: map createInvestorCashStep irs <> map createInvestorFundStep irs
        (batchCid, custodianCashInstructionCid :: managerFundInstructionCid :: investorInstructionCids) <-
          exercise settlementFactoryCid Settlement.Instruct with instructors = singleton provider; settlers = singleton provider; id = pir.requestId; description = "Settlement for " <> show pir.requestId; contextId = Some pir.requestId; steps
        let
          reqInst = zip (pir.investmentRequestCids <> pir.investmentRequestCids) investorInstructionCids
          (reqInstCash, reqInstFund) = splitAt (length irs) reqInst

        -- Allocate and approve custodian cash instruction
        (custodianCashInstructionCid, _) <- exercise custodianCashInstructionCid Instruction.Allocate with actors = singleton provider; allocation = Pledge $ toInterfaceContractId pir.cashCid
        exercise fundCid Fund.ApproveInstruction with instructionCid = custodianCashInstructionCid

        -- Allocate and approve manager fund instruction
        (managerFundInstructionCid, _) <- exercise managerFundInstructionCid Instruction.Allocate with actors = singleton provider; allocation = Pledge $ coerceContractId fundUnitsCid
        exercise managerFundInstructionCid Instruction.Approve with actors = singleton provider; approval = TakeDelivery pir.customerFundAccount

        -- Allocate and approve investor instructions
        let
          processCash (irCid, iCid) = do
            iCid <- exercise irCid AllocateInstruction with instructionCid = iCid
            exercise iCid Instruction.Approve with actors = singleton provider; approval = DebitSender
          processFund (irCid, iCid) = do
            (iCid, _) <- exercise iCid Instruction.Allocate with actors = singleton provider; allocation = CreditReceiver
            exercise irCid ApproveInstruction with instructionCid = iCid
        mapA_ processCash reqInstCash
        mapA_ processFund reqInstFund

        mapA_ (\cid -> exercise cid Delete) pir.investmentRequestCids
        exercise pooledInvestmentRequestCid Fund.Remove
        exercise batchCid Batch.Settle with actors = singleton provider

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
