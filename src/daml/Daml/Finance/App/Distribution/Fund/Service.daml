-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Fund.Service where

import DA.Set (singleton)
import Daml.Finance.App.Distribution.Fund.Model (Fund)
import Daml.Finance.App.Distribution.Investment.Model (InvestmentRequest(..))
import Daml.Finance.App.Issuance.Service qualified as Issuance (CreateIssuance(..), RequestCreateIssuance(..), Service)
import Daml.Finance.Interface.Data.Observable qualified as Observable (I, Observe(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Lifecycle.Types (Unit(..))

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice FulfillInvestmentRequest : ContractId InvestmentRequest
      with
        investmentRequestCid : ContractId InvestmentRequest
        navObservableCid : ContractId Observable.I
      controller customer
      do
        -- Transfer cash to custodian
        ir <- fetch investmentRequestCid
        (fundCid, fund) <- fetchByKey @Fund (operator, provider, ir.fundId)
        cashCid <- exercise (toInterfaceContractId ir.cashCid : ContractId Transferable.I) Transferable.Transfer with newOwnerAccount = fund.custodianCashAccount

        -- Get unit value
        nav <- exercise navObservableCid Observable.Observe with actors = singleton customer; t = toUTCTime $ Unit ir.asOfDate
        let
          unitValue = nav / fund.totalUnits
          nrUnits = ir.quantity.amount / unitValue
          fundQty = Instrument.qty nrUnits fund.instrument
        issuanceRequestCid <- exerciseByKey @Issuance.Service (operator, provider, customer) Issuance.RequestCreateIssuance with id = ir.requestId; quantity = fundQty; account..

        fail ""

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
