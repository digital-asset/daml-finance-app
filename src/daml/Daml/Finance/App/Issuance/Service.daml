-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Issuance.Service where

import DA.Assert ((===))
import Daml.Finance.App.Issuance.Model qualified as Model (DeissueRequest(..), Issuance(..), IssueRequest(..))
import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Common.Util (fetchAndRemove)
import Daml.Finance.App.Interface.Issuance.IssueRequest qualified as IssueRequest (View(..))
import Daml.Finance.App.Interface.Issuance.DeissueRequest qualified as DeissueRequest (View(..))
import Daml.Finance.App.Interface.Issuance.Service qualified as Service
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, exerciseInterfaceByKey)
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Holding.Util (getAmount)

type T = Service

instance Service.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer
      terminate = pure ()

    interface instance Service.I for Service where
      view = Service.View
      asBase = toInterface @Base.I this
      requestIssue Service.RequestIssue{issuanceId; description; quantity; account} = do
        toInterfaceContractId <$> create Model.IssueRequest with operator; provider; customer; issuanceId; description; quantity; account
      requestDeissue Service.RequestDeissue{issuanceId; holdingCid} = do
        toInterfaceContractId <$> create Model.DeissueRequest with operator; provider; customer; issuanceId; holdingCid
      issue Service.Issue{issueRequestCid} = do
        IssueRequest.View{issuanceId; description; quantity; account} <- view <$> fetchAndRemove issueRequestCid
        issuanceCid <- toInterfaceContractId <$> create Model.Issuance with operator; provider; customer; id = issuanceId; description; quantity
        account.custodian === provider
        account.owner === customer
        holdingCid <- Account.exerciseInterfaceByKey @Account.I account provider Account.Credit with quantity
        pure (issuanceCid, holdingCid)
      deissue Service.Deissue{deissueRequestCid} = do
        DeissueRequest.View{issuanceId; holdingCid} <- view <$> fetchAndRemove deissueRequestCid
        holding <- fetch holdingCid
        let
          account = getAccount holding
          amount = getAmount holding
        account.custodian === provider
        account.owner === customer
        Account.exerciseInterfaceByKey @Account.I account provider Account.Debit with holdingCid
        (issuanceCid, issuance) <- fetchByKey @Model.Issuance (operator, provider, issuanceId)
        archive issuanceCid
        toInterfaceContractId <$> create issuance with quantity = (issuance.quantity with amount = issuance.quantity.amount - amount)

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
