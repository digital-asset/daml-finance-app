-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Issuance.Auto.Service where

import Daml.Finance.App.Issuance.Model (Issuance)
import Daml.Finance.App.Issuance.Service qualified as S (CreateIssuance(..), ReduceIssuance(..), RequestCreateIssuance(..), RequestReduceIssuance(..), RequestCreateAuditedIssuance(..), CreateAuditedIssuance(..), Service)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)
-- import Daml.Finance.App.Audit.Model qualified as AuditModel (Audit(..))
import Daml.Finance.App.Audit.Model (Audit)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestAndCreateIssuance : (ContractId Issuance, ContractId Holding.I)
      with
        id : Id
        description : Text
        quantity : InstrumentQuantity
        account : AccountKey
      controller customer
      do
        createIssuanceRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateIssuance with id; description; quantity; account
        exerciseByKey @S.Service (operator, provider, customer) S.CreateIssuance with createIssuanceRequestCid

    nonconsuming choice RequestAndReduceIssuance : ContractId Issuance
      with
        id : Id
        holdingCid : ContractId Holding.I
      controller customer
      do
        reduceIssuanceRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestReduceIssuance with id; holdingCid
        exerciseByKey @S.Service (operator, provider, customer) S.ReduceIssuance with reduceIssuanceRequestCid

    nonconsuming choice RequestAndCreateAuditedIssuance : (ContractId Issuance, ContractId Holding.I)
      with
        id : Id
        description : Text
        quantity : InstrumentQuantity
        account : AccountKey
        auditCid : ContractId Audit
      controller customer
      do
        createAuditedIssuanceRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateAuditedIssuance with id; description; quantity; account; auditCid
        exerciseByKey @S.Service (operator, provider, customer) S.CreateAuditedIssuance with createAuditedIssuanceRequestCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
