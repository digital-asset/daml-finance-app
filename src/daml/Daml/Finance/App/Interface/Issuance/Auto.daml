-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Issuance.Auto where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I)
import Daml.Finance.App.Interface.Issuance.Issuance qualified as Issuance (I)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)

type I = Service

type V = View

data View = View {}
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  requestAndIssue : RequestAndIssue -> Update (ContractId Issuance.I, ContractId Holding.I)
    -- ^ Implementation of the `RequestAndIssue` choice.

  requestAndDeissue : RequestAndDeissue -> Update (ContractId Issuance.I)
    -- ^ Implementation of the `RequestAndDeissue` choice.

  nonconsuming choice RequestAndIssue : (ContractId Issuance.I, ContractId Holding.I)
    with
      issuanceId : Id
      description : Text
      quantity : InstrumentQuantity
      account : AccountKey
    controller (view $ asBase this).customer
    do
      requestAndIssue this arg

  nonconsuming choice RequestAndDeissue : (ContractId Issuance.I)
    with
      issuanceId : Id
      holdingCid : ContractId Holding.I
    controller (view $ asBase this).customer
    do
      requestAndDeissue this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = HasToInterface t Service
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
