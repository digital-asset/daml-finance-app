-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Issuance.BackToBack where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, Implementation)
import Daml.Finance.App.Interface.Distribution.Subscription.Offering qualified as Offering (I)
import Daml.Finance.App.Interface.Distribution.Subscription.Types (BackToBack)
import Daml.Finance.App.Interface.Issuance.Issuance qualified as Issuance (I)
import Daml.Finance.App.Interface.Settlement.Service qualified as SettlementService (I)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)

type I = Service

type V = View

data View = View
  with
    settlementServiceCid : ContractId SettlementService.I
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  createIssuance : CreateIssuance -> Update (ContractId Issuance.I, ContractId Holding.I, ContractId Holding.I)
    -- ^ Implementation of the `CreateIssuance` choice.

  lockOffering : LockOffering -> Update BackToBack
    -- ^ Implementation of the `LockOffering` choice.

  settleOffering : SettleOffering -> Update [ContractId Holding.I]
    -- ^ Implementation of the `SettleOffering` choice.

  nonconsuming choice CreateIssuance : (ContractId Issuance.I, ContractId Holding.I, ContractId Holding.I)
    with
      issuanceId : Id
      description : Text
      quantity : InstrumentQuantity
      customerAccount : AccountKey
      providerAccount : AccountKey
    controller (view $ asBase this).customer
    do
      createIssuance this arg

  nonconsuming choice LockOffering : BackToBack
    with
      backToBack : BackToBack
    controller (view $ asBase this).customer
    do
      lockOffering this arg

  nonconsuming choice SettleOffering : [ContractId Holding.I]
    with
      offeringCid : ContractId Offering.I
      totalQuantity : Decimal
    controller (view $ asBase this).customer
    do
      settleOffering this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Base.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
