-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Distribution.Auction.Service where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, Implementation)
import Daml.Finance.App.Interface.Distribution.Auction.Auction qualified as Auction (I)
import Daml.Finance.App.Interface.Distribution.Auction.CreateAuctionRequest qualified as CreateAuctionRequest (I)
import Daml.Finance.App.Interface.Distribution.Bidding.Bid qualified as Bid (I)
import Daml.Finance.App.Interface.Settlement.Service qualified as SettlementService (I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentKey, InstrumentQuantity, Parties)

type I = Service

type V = View

data View = View
  with
    settlementServiceCid : ContractId SettlementService.I
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  requestCreateAuction : RequestCreateAuction -> Update (ContractId CreateAuctionRequest.I)
    -- ^ Implementation of the `RequestCreateAuction` choice.

  createAuction : CreateAuction -> Update (ContractId Auction.I)
    -- ^ Implementation of the `CreateAuction` choice.

  processAuction : ProcessAuction -> Update (ContractId Auction.I)
    -- ^ Implementation of the `ProcessAuction` choice.

  nonconsuming choice RequestCreateAuction : ContractId CreateAuctionRequest.I
    with
      auctionId : Id
      description : Text
      quantity : InstrumentQuantity
      currency : InstrumentKey
      floor : Decimal
      collateralCid : ContractId Fungible.I
      receivableAccount : AccountKey
      observers : Parties
    controller (view $ asBase this).customer
    do
      requestCreateAuction this arg

  nonconsuming choice CreateAuction : ContractId Auction.I
    with
      createAuctionRequestCid : ContractId CreateAuctionRequest.I
    controller (view $ asBase this).provider
    do
      createAuction this arg

  nonconsuming choice ProcessAuction : ContractId Auction.I
    with
      auctionCid : ContractId Auction.I
      bidCids : [ContractId Bid.I]
    controller (view $ asBase this).provider
    do
      processAuction this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Base.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
