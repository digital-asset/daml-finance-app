-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Distribution.Auction.Auction where

import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentKey, InstrumentQuantity, Parties)

type I = Auction

type V = View

data View = View
  with
    operator : Party
    provider : Party
    customer : Party
    id : Id
    description : Text
    quantity : InstrumentQuantity
    currency : InstrumentKey
    floor : Decimal
    collateralCid : ContractId Fungible.I
    receivableAccount : AccountKey
    status : Status
    observers : Parties
  deriving (Eq, Show)

data Status
    = Open
    | PartiallyAllocated with
        finalPrice : Decimal
        remaining : Decimal
    | FullyAllocated with
        finalPrice : Decimal
    | NoValidBids
  deriving (Eq, Show)

interface Auction where
  viewtype View
    -- ^ Interface view type.

  asRemovable : Removable.I
    -- ^ Conversion to the `Removable` interface.

  nonconsuming choice GetView : View
    with
      actor : Party
    controller actor
    do
      pure $ view this

-- | Type constraint for requiring templates to implement `Auction`.
type Implementation t = (HasToInterface t Auction, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Auction
instance HasToInterface Auction Removable.I where _toInterface = asRemovable
