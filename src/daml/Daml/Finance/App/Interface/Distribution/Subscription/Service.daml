-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Distribution.Subscription.Service where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, Implementation)
import Daml.Finance.App.Interface.Distribution.Subscription.Offering qualified as Offering (I)
import Daml.Finance.App.Interface.Distribution.Subscription.Subscription qualified as Subscription (I)
import Daml.Finance.App.Interface.Distribution.Subscription.Types (BackToBack)
import Daml.Finance.App.Interface.Settlement.Service qualified as SettlementService (I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity, Parties)

type I = Service

type V = View

data View = View
  with
    settlementServiceCid : ContractId SettlementService.I
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  createOffering : CreateOffering -> Update (ContractId Offering.I)
    -- ^ Implementation of the `CreateOffering` choice.

  processOffering : ProcessOffering -> Update (ContractId Offering.I)
    -- ^ Implementation of the `ProcessOffering` choice.

  nonconsuming choice CreateOffering : ContractId Offering.I
    with
      offeringId : Id
      description : Text
      asset : InstrumentQuantity
      price : InstrumentQuantity
      customerHoldingCid : ContractId Fungible.I
      customerAccount : AccountKey
      backToBack : Optional BackToBack
      observers : Parties
    controller (view $ asBase this).customer
    do
      createOffering this arg

  nonconsuming choice ProcessOffering : ContractId Offering.I
    with
      offeringCid : ContractId Offering.I
      subscriptionCids : [ContractId Subscription.I]
    controller (view $ asBase this).provider
    do
      processOffering this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Base.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
