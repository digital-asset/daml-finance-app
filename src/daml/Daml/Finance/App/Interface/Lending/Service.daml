-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Lending.Service where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, Implementation)
import Daml.Finance.App.Interface.Lending.BorrowAgreement qualified as BorrowAgreement (I)
import Daml.Finance.App.Interface.Lending.BorrowOffer qualified as BorrowOffer (I)
import Daml.Finance.App.Interface.Lending.BorrowOfferRequest qualified as BorrowOfferRequest (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)

type I = Service

type V = View

data View = View {}
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  requestBorrowOffer : RequestBorrowOffer -> Update (ContractId BorrowOfferRequest.I)
    -- ^ Implementation of the `RequestBorrowOffer` choice.

  acceptBorrowOffer : AcceptBorrowOffer -> Update (ContractId Transferable.I, ContractId BorrowAgreement.I)
    -- ^ Implementation of the `AcceptBorrowOffer` choice.

  createBorrowOffer : CreateBorrowOffer -> Update (ContractId BorrowOffer.I)
    -- ^ Implementation of the `CreateBorrowOffer` choice.

  nonconsuming choice RequestBorrowOffer : ContractId BorrowOfferRequest.I
    with
      dealId : Id
      description : Text
      borrowed : InstrumentQuantity
      maturity : Date
    controller (view $ asBase this).customer
    do
      requestBorrowOffer this arg

  nonconsuming choice AcceptBorrowOffer : (ContractId Transferable.I, ContractId BorrowAgreement.I)
    with
      borrowOfferCid : ContractId BorrowOffer.I
      collateralCid : ContractId Transferable.I
      account : AccountKey
    controller (view $ asBase this).customer
    do
      acceptBorrowOffer this arg

  nonconsuming choice CreateBorrowOffer : ContractId BorrowOffer.I
    with
      borrowOfferRequestCid : ContractId BorrowOfferRequest.I
      interest : InstrumentQuantity
      collateral : InstrumentQuantity
      borrowedCid : ContractId Transferable.I
      lenderBorrowedAccount : AccountKey
      lenderInterestAccount : AccountKey
    controller (view $ asBase this).provider
    do
      createBorrowOffer this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Base.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
