-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Trading.Auto where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I)
import Daml.Finance.App.Interface.Trading.Order qualified as Order (I, Side, View)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity, Parties)

type I = Service

type V = View

data View = View {}
  deriving (Eq, Show)

interface Service where
  viewtype V

  asBase : Base.I
    -- ^ Conversion to base `Service` interface.

  requestAndCreateOrder : RequestAndCreateOrder -> Update (Optional (ContractId Order.I, Order.View))
    -- ^ Implementation of the `RequestAndCreateOrder` choice.

  requestAndCancelOrder : RequestAndCancelOrder -> Update ()
    -- ^ Implementation of the `RequestAndCancelOrder` choice.

  nonconsuming choice RequestAndCreateOrder : Optional (ContractId Order.I, Order.View)
    with
      id : Id
      listingId : Id
      quantity : InstrumentQuantity
      price : InstrumentQuantity
      side : Order.Side
      collateralCid : ContractId Fungible.I
      account : AccountKey
      orderCids : [ContractId Order.I]
      observers : Parties
    controller (view $ asBase this).customer
    do
      requestAndCreateOrder this arg

  nonconsuming choice RequestAndCancelOrder : ()
    with
      orderCid : ContractId Order.I
    controller (view $ asBase this).customer
    do
      requestAndCancelOrder this arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = HasToInterface t Service
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase
