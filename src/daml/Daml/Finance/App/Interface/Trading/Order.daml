-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Trading.Order where

import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.App.Interface.Settlement.Service qualified as SettlementService (I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity, Parties)

type I = Order

type V = View

data Side
    = Buy
    | Sell
  deriving (Eq, Show)

data FillResult = FillResult
  with
    orderOpt : Optional (ContractId Order, View)
    batchCid : ContractId Batch.I
    instructionCid : ContractId Instruction.I
  deriving (Eq, Show)

data View = View
  with
    operator : Party
    provider : Party
    customer : Party
    id : Id
    timestamp : Time
    listingId : Id
    quantity : InstrumentQuantity
    side : Side
    price : InstrumentQuantity
    collateralCid : ContractId Fungible.I
    account : AccountKey
    observers : Parties
  deriving (Eq, Show)

interface Order where
  viewtype View
    -- ^ Interface view type.

  asRemovable : Removable.I
    -- ^ Conversion to the `Removable` interface.

  fill : Fill -> Update FillResult
    -- ^ Implementation of the `Fill` choice.

  approveInstruction : ApproveInstruction -> Update (ContractId Instruction.I)
    -- ^ Implementation of the `ApproveInstruction` choice.

  choice Fill : FillResult
    with
      settlementServiceCid : ContractId SettlementService.I
      other : View
      isResting : Bool
    controller (view this).provider
    do
      fill this arg

  nonconsuming choice ApproveInstruction : ContractId Instruction.I
    with
      instructionCid : ContractId Instruction.I
    controller (view this).provider
    do
      approveInstruction this arg

-- | Type constraint for requiring templates to implement `Order`.
type Implementation t = (HasToInterface t Order, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Order
instance HasToInterface Order Removable.I where _toInterface = asRemovable
