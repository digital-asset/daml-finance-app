-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Listing.Service where

import Daml.Finance.App.Listing.Model (CreateListingRequest(..), DeleteListingRequest(..), Listing(..))
import Daml.Finance.App.Util (fetchAndArchive)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, Parties)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestCreateListing : ContractId CreateListingRequest
      with
        id : Text
        tradedInstrument : InstrumentKey
        quotedInstrument : InstrumentKey
        observers : Parties
      controller customer
      do
        create CreateListingRequest with operator; provider; customer; id; tradedInstrument; quotedInstrument; observers

    nonconsuming choice RequestDeleteListing : ContractId DeleteListingRequest
      with
        listingCid : ContractId Listing
      controller customer
      do
        create DeleteListingRequest with operator; provider; customer; listingCid

    nonconsuming choice CreateListing : ContractId Listing
      with
        createListingRequestCid : ContractId CreateListingRequest
      controller provider
      do
        CreateListingRequest{operator; provider; customer; id; tradedInstrument; quotedInstrument; observers} <- fetchAndArchive createListingRequestCid
        create Listing with operator; provider; customer; id; tradedInstrument; quotedInstrument; observers

    nonconsuming choice DeleteListing : ()
      with
        deleteListingRequestCid : ContractId DeleteListingRequest
      controller provider
      do
        DeleteListingRequest{operator; provider; customer; listingCid} <- fetchAndArchive deleteListingRequestCid
        archive listingCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
