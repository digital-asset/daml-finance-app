-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Listing.Service where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, Remove(..))
import Daml.Finance.App.Interface.Common.Util (fetchAndRemove)
import Daml.Finance.App.Interface.Listing.ListingRequest qualified as ListingRequest (View(..))
import Daml.Finance.App.Interface.Listing.DelistingRequest qualified as DelistingRequest (View(..))
import Daml.Finance.App.Interface.Listing.Service qualified as Service (Delist(..), HasImplementation, I, List(..), RequestDelisting(..), RequestListing(..), View(..))
import Daml.Finance.App.Listing.Model qualified as Model

type T = Service

instance Service.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer

      terminate = pure ()

    interface instance Service.I for Service where
      view = Service.View

      asBase = toInterface @Base.I this

      requestListing Service.RequestListing{listingId; description; tradedInstrument; quotedInstrument; observers} = do
        toInterfaceContractId <$> create Model.ListingRequest with operator; provider; customer; listingId; description; tradedInstrument; quotedInstrument; observers

      requestDelisting Service.RequestDelisting{listingCid} = do
        toInterfaceContractId <$> create Model.DelistingRequest with operator; provider; customer; listingCid

      list Service.List{listingRequestCid} = do
        ListingRequest.View{listingId; description; tradedInstrument; quotedInstrument; observers} <- view <$> fetchAndRemove listingRequestCid
        toInterfaceContractId <$> create Model.Listing with operator; provider; customer; id = listingId; description; tradedInstrument; quotedInstrument; observers

      delist Service.Delist{delistingRequestCid} = do
        DelistingRequest.View{listingCid} <- view <$> fetchAndRemove delistingRequestCid
        exercise (toInterfaceContractId @Removable.I listingCid) Removable.Remove

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
