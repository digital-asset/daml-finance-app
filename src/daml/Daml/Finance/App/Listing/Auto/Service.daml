-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Listing.Auto.Service where

import Daml.Finance.App.Listing.Service qualified as S (CreateListing(..), DeleteListing(..), RequestCreateListing(..), RequestDeleteListing(..), Service)
import Daml.Finance.App.Listing.Model (Listing)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Types.Common (Parties)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestAndCreateListing : ContractId Listing
      with
        id : Text
        tradedInstrument : Instrument.K
        quotedInstrument : Instrument.K
        observers : Parties
      controller customer
      do
        createListingRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateListing with id; tradedInstrument; quotedInstrument; observers
        exerciseByKey @S.Service (operator, provider, customer) S.CreateListing with createListingRequestCid

    nonconsuming choice RequestAndDeleteListing : ()
      with
        listingCid : ContractId Listing
      controller customer
      do
        deleteListingRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestDeleteListing with listingCid
        exerciseByKey @S.Service (operator, provider, customer) S.DeleteListing with deleteListingRequestCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
