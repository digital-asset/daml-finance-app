-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Setup.Scenario.CorporateActions where

import DA.Date (Month(..), date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Finance.App.Setup.Types (Fixture(..))
import Daml.Finance.App.Setup.Util.Script.Workflow (allocateAndApprove, claimEffect, declareDividend)
import Daml.Finance.App.Setup.Util.Update.Role (createOperatorRole, createCustodianRole)
import Daml.Finance.App.Setup.Util.Update.Service (createCustodyService, createIssuanceService, createIssuanceAutoService, createLifecycleService, createSettlementService, createStructuringService, createStructuringAutoService)
import Daml.Finance.App.Setup.Util.Update.Workflow (createAccount, createAccountDirectory, createClockAndEvent, deposit, issue, originateEquity, originateToken, transfer)
import Daml.Script
import Prelude hiding (Scenario)

template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        -- Parties
        let [ operator, public, centralBank, registry, issuer, custodian, inv1, inv2, inv3 ] = parties

        -- Roles
        createOperatorRole  operator
        createCustodianRole operator centralBank
        createCustodianRole operator registry
        createCustodianRole operator issuer
        createCustodianRole operator custodian

        -- Services
        let
          assets = ["AcmePref", "AcmeCommon"]
          cashSettlementPaths = [[issuer], [registry], [custodian], [inv1, custodian], [inv2, custodian], [inv3, custodian]]
          secSettlementPaths = [[registry], [custodian, registry], [inv1, custodian, registry], [inv2, custodian, registry], [inv3, custodian, registry]]
          cashRoute = Settlement.Hierarchy with rootCustodian = centralBank; pathsToRootCustodian = cashSettlementPaths
          secRoute = Settlement.Hierarchy with rootCustodian = issuer; pathsToRootCustodian = secSettlementPaths
          paths = fromList $ ("USD", cashRoute) :: map (\a -> (a, secRoute)) assets
        createCustodyService          operator centralBank  issuer    public paths
        createCustodyService          operator centralBank  registry  public paths
        createCustodyService          operator centralBank  custodian public paths
        createCustodyService          operator issuer       registry  public paths
        createCustodyService          operator registry     issuer    public paths
        createCustodyService          operator registry     custodian public paths
        createCustodyService          operator custodian    inv1      public paths
        createCustodyService          operator custodian    inv2      public paths
        createCustodyService          operator custodian    inv3      public paths
        createIssuanceService         operator registry     issuer
        createIssuanceAutoService     operator registry     issuer
        createStructuringService      operator registry     issuer
        createStructuringAutoService  operator registry     issuer
        createLifecycleService        operator registry     issuer    public
        createSettlementService       operator issuer       registry  paths
        createSettlementService       operator registry     custodian paths
        createSettlementService       operator custodian    inv1      paths
        createSettlementService       operator custodian    inv2      paths
        createSettlementService       operator custodian    inv3      paths

        -- Accounts
        registryCashAccount   <- createAccount operator centralBank registry  public "Registry@CentralBank|Cash"       empty
        issuerCashAccount     <- createAccount operator centralBank issuer    public "Issuer@CentralBank|Cash"         empty
        custodianCashAccount  <- createAccount operator centralBank custodian public "Custodian@CentralBank|Cash"      empty
        inv1CashAccount       <- createAccount operator custodian   inv1      public "Investor1@Custodian|Cash"        empty
        inv2CashAccount       <- createAccount operator custodian   inv2      public "Investor2@Custodian|Cash"        empty
        inv3CashAccount       <- createAccount operator custodian   inv3      public "Investor3@Custodian|Cash"        empty
        registrySecAccount    <- createAccount operator issuer      registry  public "Registry@Issuer|Securities"      empty
        issuerSecAccount      <- createAccount operator registry    issuer    public "Issuer@Registry|Securities"      empty
        custodianSecAccount   <- createAccount operator registry    custodian public "Custodian@Registry|Securities"   empty
        inv1SecAccount        <- createAccount operator custodian   inv1      public "Investor1@Custodian|Securities"  empty
        inv2SecAccount        <- createAccount operator custodian   inv2      public "Investor2@Custodian|Securities"  empty
        inv3SecAccount        <- createAccount operator custodian   inv3      public "Investor3@Custodian|Securities"  empty

        -- Time
        t <- getTime
        let
          today = toDateUTC t
          todayTime = time today 0 0 0
          tt d = time d 0 0 0
          epoch = tt $ date 1970 Jan 1
          (ty, tm, td) = toGregorian today
          pub = fromList [("Public", singleton public)]
        (clockCid, eventCid) <- createClockAndEvent parties today (singleton public)

        -- Instruments
        usd     <- originateToken  centralBank centralBank pub epoch "USD"        "United States Dollar"
        equity  <- originateEquity registry    issuer      pub epoch "AcmePref"   "Acme, Inc. Preferred Stock"
        equity2 <- originateEquity registry    issuer      pub epoch "AcmeCommon" "Acme, Inc. Common Stock"

        -- Data
        createAccountDirectory issuer     [(usd, issuerCashAccount), (equity, issuerSecAccount)]        $ singleton public
        createAccountDirectory registry   [(usd, registryCashAccount), (equity, registrySecAccount)]    $ singleton public
        createAccountDirectory custodian  [(usd, custodianCashAccount), (equity, custodianSecAccount)]  $ singleton public
        createAccountDirectory inv1       [(usd, inv1CashAccount), (equity, inv1SecAccount)]            $ singleton public
        createAccountDirectory inv2       [(usd, inv2CashAccount), (equity, inv2SecAccount)]            $ singleton public
        createAccountDirectory inv3       [(usd, inv3CashAccount), (equity, inv3SecAccount)]            $ singleton public

        -- Holdings
        registryEquityCid     <- deposit  operator issuer   registry    public (qty 1_000_000.0 equity) registrySecAccount
        (_, issuerEquityCid)  <- issue    operator registry issuer      public (qty 1_000_000.0 equity) issuerSecAccount
        custodianEquityCid    <- transfer issuer   custodianSecAccount  public $ coerceContractId issuerEquityCid
        inv1EquityCid         <- deposit  operator custodian inv1       public (qty 500_000.0 equity) inv1SecAccount
        inv2EquityCid         <- deposit  operator custodian inv2       public (qty 300_000.0 equity) inv2SecAccount
        inv3EquityCid         <- deposit  operator custodian inv3       public (qty 200_000.0 equity) inv3SecAccount

        issuerCashCid         <- coerceContractId <$> deposit  operator centralBank issuer     public (qty 500_000.0 usd) issuerCashAccount
        registryCashCid       <- coerceContractId <$> deposit  operator centralBank registry   public (qty 500_000.0 usd) registryCashAccount

        let
          instruments = [usd, equity, equity2]
          accounts = [registryCashAccount, issuerCashAccount, custodianCashAccount, inv1CashAccount, inv2CashAccount, inv3CashAccount, registrySecAccount, issuerSecAccount, custodianSecAccount, inv1SecAccount, inv2SecAccount, inv3SecAccount]
          holdings = [registryEquityCid, issuerEquityCid, toInterfaceContractId custodianEquityCid, inv1EquityCid, inv2EquityCid, inv3EquityCid, issuerCashCid, registryCashCid]
          services = []
        pure Fixture with instruments; accounts; holdings; services

run : Script ()
run = do
  parties@[operator, public, centralBank, registry, issuer, custodian, inv1, inv2, inv3] <-
    mapA allocateParty ["Operator", "Public", "CentralBank", "Registry", "Issuer", "Custodian", "Investor1", "Investor2", "Investor3"]
  submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  pure ()

testDividend : Script ()
testDividend = do
  -- Fixture
  parties@[operator, public, centralBank, registry, issuer, custodian, inv1, inv2, inv3] <-
    mapA allocateParty ["Operator", "Public", "CentralBank", "Registry", "Issuer", "Custodian", "Investor1", "Investor2", "Investor3"]
  Fixture{instruments; accounts; holdings} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  -- Workflows
  t <- getTime
  let
    [usd, equity, _] = instruments
    [registryCashAccount, issuerCashAccount, custodianCashAccount, inv1CashAccount, inv2CashAccount, inv3CashAccount, registrySecAccount, issuerSecAccount, custodianSecAccount, inv1SecAccount, inv2SecAccount, inv3SecAccount] = accounts
    [registryEquityCid, issuerEquityCid, custodianEquityCid, inv1EquityCid, inv2EquityCid, inv3EquityCid, issuerCashCid, registryCashCid] = holdings
    today = toDateUTC t
    todayTime = time today 0 0 0

  (newEquity, effectCid) <- declareDividend operator registry issuer public equity todayTime [qty 0.5 usd]

  -- Claim registry holding
  (batchCid, [oldCid, newCid, cashCid]) <- claimEffect operator issuer registry public effectCid [registryEquityCid] (Id "Registry-Settlement")
  allocateAndApprove operator issuer oldCid (Pledge registryEquityCid) DebitSender
  allocateAndApprove operator issuer newCid CreditReceiver (TakeDelivery registrySecAccount)
  allocateAndApprove operator issuer cashCid (Pledge issuerCashCid) (TakeDelivery registryCashAccount)
  submitMulti [issuer] [public] do exerciseCmd batchCid Batch.Settle with actors = singleton issuer

  -- Claim custodian holding
  (batchCid, [oldCid, newCid, cashCid]) <- claimEffect operator registry custodian public effectCid [toInterfaceContractId custodianEquityCid] (Id "Custodian-Settlement")
  allocateAndApprove operator registry oldCid (Pledge custodianEquityCid) DebitSender
  allocateAndApprove operator registry newCid CreditReceiver (TakeDelivery custodianSecAccount)
  allocateAndApprove operator registry cashCid (Pledge registryCashCid) (TakeDelivery custodianCashAccount)
  submitMulti [registry] [public] do exerciseCmd batchCid Batch.Settle with actors = singleton registry

  -- Claim investor holdings
  (batchCid, [oldCid, newCid, cashCid]) <- claimEffect operator custodian inv1 public effectCid [toInterfaceContractId inv1EquityCid] (Id "Investor1-Settlement")
  allocateAndApprove operator custodian oldCid (Pledge inv1EquityCid) DebitSender
  allocateAndApprove operator custodian newCid CreditReceiver (TakeDelivery inv1SecAccount)
  allocateAndApprove operator custodian cashCid CreditReceiver (TakeDelivery inv1CashAccount)
  submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle with actors = singleton custodian
  (batchCid, [oldCid, newCid, cashCid]) <- claimEffect operator custodian inv2 public effectCid [toInterfaceContractId inv2EquityCid] (Id "Investor2-Settlement")
  allocateAndApprove operator custodian oldCid (Pledge inv2EquityCid) DebitSender
  allocateAndApprove operator custodian newCid CreditReceiver (TakeDelivery inv2SecAccount)
  allocateAndApprove operator custodian cashCid CreditReceiver (TakeDelivery inv2CashAccount)
  submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle with actors = singleton custodian
  (batchCid, [oldCid, newCid, cashCid]) <- claimEffect operator custodian inv3 public effectCid [toInterfaceContractId inv3EquityCid] (Id "Investor3-Settlement")
  allocateAndApprove operator custodian oldCid (Pledge inv3EquityCid) DebitSender
  allocateAndApprove operator custodian newCid CreditReceiver (TakeDelivery inv3SecAccount)
  allocateAndApprove operator custodian cashCid CreditReceiver (TakeDelivery inv3CashAccount)
  submitMulti [custodian] [public] do exerciseCmd batchCid Batch.Settle with actors = singleton custodian

  pure ()
