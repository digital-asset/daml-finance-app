-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Setup.Scenario.Default where

import ContingentClaims.Core.Builders (unrollDates)
import DA.Date (DayOfWeek(Saturday, Sunday), addDays, date, toDateUTC, toGregorian)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import DA.Time (time)
import Daml.Finance.App.Setup.Payoff (basisSwap, bond, callOptionPhysical, callOptionCash, futureDvp, interestRateSwap)
import Daml.Finance.App.Setup.Types (Fixture(..))
import Daml.Finance.App.Setup.Util.Script.Common (getHolding)
import Daml.Finance.App.Setup.Util.Script.Workflow (createAskOrder, createAuction, createAuctionBid, createBidOrder, list, processAuction)
import Daml.Finance.App.Setup.Util.Update.Role (createOperatorRole, createCustodianRole, createDistributorRole, createExchangeRole)
import Daml.Finance.App.Setup.Util.Update.Service (createAuctionService, createAuctionAutoService, createBiddingService, createBiddingAutoService, createCustodyService, createIssuanceService, createIssuanceAutoService, createLifecycleService, createListingService, createListingAutoService, createStructuringService, createStructuringAutoService, createTradingService, createTradingAutoService)
import Daml.Finance.App.Setup.Util.Update.Workflow (createAccount, createAccountDirectory, createCalendar, createClockAndEvent, createObservation, deposit, issue, originateEquity, originateGeneric, originateToken)
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Hierarchy qualified as Settlement (Hierarchy(..))
import Daml.Script
import Prelude hiding (Scenario)

template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        -- Parties
        let [ operator, public, centralBank, registry, exchange, agent, issuer, inv1, inv2, inv3 ] = parties

        -- Roles
        createOperatorRole    operator
        createCustodianRole   operator centralBank
        createCustodianRole   operator registry
        createDistributorRole operator agent
        createExchangeRole    operator exchange

        -- Services
        let
          assets = ["TSLA", "NFLX", "FWD1", "BOND1", "SWAP1", "BSWAP1", "OPT1", "OPT2"]
          custodianPaths = [[issuer], [inv1], [inv2], [inv3]]
          cashRoute = Settlement.Hierarchy with rootCustodian = centralBank; pathsToRootCustodian = custodianPaths
          secRoute = Settlement.Hierarchy with rootCustodian = registry; pathsToRootCustodian = custodianPaths
          paths = fromList $ ("USD", cashRoute) :: map (\a -> (a, secRoute)) assets
        createCustodyService          operator centralBank issuer public paths
        createCustodyService          operator centralBank inv1   public paths
        createCustodyService          operator centralBank inv2   public paths
        createCustodyService          operator centralBank inv3   public paths
        createCustodyService          operator registry    issuer public paths
        createCustodyService          operator registry    inv1   public paths
        createCustodyService          operator registry    inv2   public paths
        createCustodyService          operator registry    inv3   public paths
        createIssuanceService         operator registry    issuer
        createIssuanceAutoService     operator registry    issuer
        createStructuringService      operator registry    issuer
        createStructuringAutoService  operator registry    issuer
        createLifecycleService        operator registry    issuer public
        createListingService          operator exchange    issuer
        createListingAutoService      operator exchange    issuer
        createTradingService          operator exchange    issuer paths
        createTradingAutoService      operator exchange    issuer
        createTradingService          operator exchange    inv1 paths
        createTradingAutoService      operator exchange    inv1
        createTradingService          operator exchange    inv2 paths
        createTradingAutoService      operator exchange    inv2
        createTradingService          operator exchange    inv3 paths
        createTradingAutoService      operator exchange    inv3
        createAuctionService          operator agent       issuer paths
        createAuctionAutoService      operator agent       issuer
        createBiddingService          operator agent       inv1
        createBiddingAutoService      operator agent       inv1
        createBiddingService          operator agent       inv2
        createBiddingAutoService      operator agent       inv2
        createBiddingService          operator agent       inv3
        createBiddingAutoService      operator agent       inv3

        -- Accounts
        issuerCashAccount <- createAccount operator centralBank  issuer public "Issuer@CentralBank"    empty
        inv1CashAccount   <- createAccount operator centralBank  inv1   public "Investor1@CentralBank" empty
        inv2CashAccount   <- createAccount operator centralBank  inv2   public "Investor2@CentralBank" empty
        inv3CashAccount   <- createAccount operator centralBank  inv3   public "Investor3@CentralBank" empty
        issuerSecAccount  <- createAccount operator registry     issuer public "Issuer@Registry"       empty
        inv1SecAccount    <- createAccount operator registry     inv1   public "Investor1@Registry"    empty
        inv2SecAccount    <- createAccount operator registry     inv2   public "Investor2@Registry"    empty
        inv3SecAccount    <- createAccount operator registry     inv3   public "Investor3@Registry"    empty

        -- Time
        t <- getTime
        let
          today = toDateUTC t
          todayTime = time today 0 0 0
          yday = time (addDays today (-1)) 0 0 0
          (todayYear, todayMonth, todayDay) = toGregorian today
        createClockAndEvent parties today (singleton public)

        -- Data
        let
          pub = fromList [("Public", singleton public)]
          libor3M = "USD-LIBOR-3M"
          libor6M = "USD-LIBOR-6M"
          tslaObs = "TSLA"
        createObservation issuer libor3M [(todayTime, 0.0018825)] pub
        createObservation issuer libor6M [(todayTime, 0.0022363)] pub
        createCalendar issuer "FED" [Saturday, Sunday] [] pub

        -- Instruments
        usd     <- originateToken    centralBank centralBank pub yday "USD"     "United States Dollar"
        tsla    <- originateEquity   registry    issuer      pub yday "TSLA"    "Tesla, Inc. Common Stock"
        nflx    <- originateEquity   registry    issuer      pub yday "NFLX"    "Netflix, Inc. Common Stock"
        fwd     <- originateGeneric  registry    issuer      pub yday "FWD1"    "Forward on TSLA"                 $ futureDvp tsla 20.0 usd 10_000.0 today
        bnd     <- originateGeneric  registry    issuer      pub yday "BOND1"   "Bond 5Y @ 4.875%"                $ bond usd 1.0 0.04875 $ unrollDates todayYear (todayYear + 4) [todayMonth] todayDay
        swp     <- originateGeneric  registry    issuer      pub yday "SWAP1"   "Swap LIBOR-6M vs 0.25%"          $ interestRateSwap libor6M 0.0025 usd $ unrollDates todayYear (todayYear + 2) [todayMonth] todayDay
        bswp    <- originateGeneric  registry    issuer      pub yday "BSWAP1"  "Basis Swap LIBOR-6M vs 3M+0.15%" $ basisSwap libor3M libor6M 0.0015 usd $ unrollDates todayYear (todayYear + 2) [todayMonth] todayDay
        opt     <- originateGeneric  registry    issuer      pub yday "OPT1"    "Call on TSLA @ 500.0 (physical)" $ callOptionPhysical tsla 20.0 usd 10_000.0 (date (todayYear + 1) todayMonth todayDay)
        opt2    <- originateGeneric  registry    issuer      pub yday "OPT2"    "Call on TSLA @ 700.0 (cash)"     $ callOptionCash tslaObs usd 700.0 (date (todayYear + 1) todayMonth todayDay)

        let securities = [tsla, nflx, fwd, bnd, swp, bswp, opt, opt2]
        createAccountDirectory issuer ([(usd, issuerCashAccount)] <> map (\s -> (s, issuerSecAccount)) securities)  $ singleton public
        createAccountDirectory inv1   ([(usd, inv1CashAccount)] <> map (\s -> (s, inv1SecAccount)) securities)      $ singleton public
        createAccountDirectory inv2   ([(usd, inv2CashAccount)] <> map (\s -> (s, inv2SecAccount)) securities)      $ singleton public
        createAccountDirectory inv3   ([(usd, inv3CashAccount)] <> map (\s -> (s, inv3SecAccount)) securities)      $ singleton public

        -- Holdings
        inv1CashCid <- coerceContractId <$> deposit operator centralBank inv1 public (qty 1_000_000.0 usd) inv1CashAccount
        inv2CashCid <- coerceContractId <$> deposit operator centralBank inv2 public (qty 1_000_000.0 usd) inv2CashAccount
        inv3CashCid <- coerceContractId <$> deposit operator centralBank inv3 public (qty 1_000_000.0 usd) inv3CashAccount

        (_, issuerFwdCid)       <- issue operator registry issuer public (qty 1.0 fwd)           issuerSecAccount
        (_, issuerBondCid)      <- issue operator registry issuer public (qty 1_000_000.0 bnd)   issuerSecAccount
        (_, issuerSwapCid)      <- issue operator registry issuer public (qty 10_000_000.0 swp)  issuerSecAccount
        (_, issuerBasisSwapCid) <- issue operator registry issuer public (qty 10_000_000.0 bswp) issuerSecAccount

        let
          instruments = [usd, tsla, nflx, fwd, bnd, swp, bswp, opt, opt2]
          accounts = [issuerCashAccount, inv1CashAccount, inv2CashAccount, inv3CashAccount, issuerSecAccount, inv1SecAccount, inv2SecAccount, inv3SecAccount]
          holdings = [inv1CashCid, inv2CashCid, inv3CashCid, issuerFwdCid, issuerBondCid, issuerSwapCid, issuerBasisSwapCid]
          services = []
        pure Fixture with instruments; accounts; holdings; services

run : Script Fixture
run = do
  parties@[operator, public, centralBank, registry, exchange, agent, issuer, inv1, inv2, inv3] <-
    mapA allocateParty ["Operator", "Public", "CentralBank", "Registry", "Exchange", "Agent", "Issuer", "Investor1", "Investor2", "Investor3"]
  submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

testAuction : Script ()
testAuction = do
  -- Fixture
  parties@[operator, public, centralBank, registry, exchange, agent, issuer, inv1, inv2, inv3] <-
    mapA allocateParty ["Operator", "Public", "CentralBank", "Registry", "Exchange", "Agent", "Issuer", "Investor1", "Investor2", "Investor3"]
  Fixture{instruments; accounts; holdings} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  -- Workflow
  let
    [usd, tsla, nflx, fwd, bnd, swp, bswp, opt, opt2] = instruments
    [issuerCashAccount, inv1CashAccount, inv2CashAccount, inv3CashAccount, issuerSecAccount, inv1SecAccount, inv2SecAccount, inv3SecAccount] = accounts
    [inv1CashCid, inv2CashCid, inv3CashCid, issuerFwdCid, issuerBondCid, issuerSwapCid, issuerBasisSwapCid] = holdings
  auctionCid        <- createAuction operator agent issuer public (Id "AUCTION1") "AUCTION1" (qty 1_000_000.0 bnd) usd 0.95 (coerceContractId issuerBondCid) issuerCashAccount
  inv1CollateralCid <- coerceContractId <$> getHolding inv1 (qty 500_000.0 usd)
  inv2CollateralCid <- coerceContractId <$> getHolding inv2 (qty 392_000.0 usd)
  inv3CollateralCid <- coerceContractId <$> getHolding inv3 (qty 297_000.0 usd)
  inv1BidCid        <- createAuctionBid operator agent inv1 public auctionCid 500_000.0 1.0  inv1CollateralCid inv1SecAccount
  inv2BidCid        <- createAuctionBid operator agent inv2 public auctionCid 400_000.0 0.98 inv2CollateralCid inv2SecAccount
  inv3BidCid        <- createAuctionBid operator agent inv3 public auctionCid 300_000.0 0.99 inv3CollateralCid inv3SecAccount
  processAuction operator agent issuer public auctionCid [inv1BidCid, inv2BidCid, inv3BidCid]
  pure ()

testTrading : Script ()
testTrading = do
  -- Fixture
  parties@[operator, public, centralBank, registry, exchange, agent, issuer, inv1, inv2, inv3] <-
    mapA allocateParty ["Operator", "Public", "CentralBank", "Registry", "Exchange", "Agent", "Issuer", "Investor1", "Investor2", "Investor3"]
  Fixture{instruments; accounts} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  -- Workflows
  let
    [usd, tsla, nflx, fwd, bnd, swp, bswp, opt, opt2] = instruments
    listingId = Id "SWAP/USD"
  list operator exchange issuer listingId "SWAP vs USD" swp usd $ singleton public
  createAskOrder operator exchange issuer public (Id "1") (qty 250_000.0 swp) (qty 1.00 usd) $ singleton public
  createAskOrder operator exchange issuer public (Id "2") (qty 250_000.0 swp) (qty 1.00 usd) $ singleton public
  createBidOrder operator exchange inv1   public (Id "3") (qty 400_000.0 swp) (qty 1.00 usd) $ singleton public
  pure ()

