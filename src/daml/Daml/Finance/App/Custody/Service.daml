-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Custody.Service where

import DA.Assert ((===))
import Daml.Finance.App.Custody.Model qualified as Model
import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Common.Util (fetchAndRemove)
import Daml.Finance.App.Interface.Custody.CloseAccountRequest qualified as CloseAccountRequest (View(..))
import Daml.Finance.App.Interface.Custody.DepositRequest qualified as DepositRequest (View(..))
import Daml.Finance.App.Interface.Custody.OpenAccountRequest qualified as OpenAccountRequest (View(..))
import Daml.Finance.App.Interface.Custody.Service qualified as Service
import Daml.Finance.App.Interface.Custody.WithdrawRequest qualified as WithdrawRequest (View(..))
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, exerciseInterfaceByKey)
import Daml.Finance.Interface.Account.Factory qualified as Account (F, Create(..), Remove(..))
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Lifecycle (Claim)
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..))

type T = Service

instance Service.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
    claimRuleCid : ContractId Lifecycle.Claim
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer

      terminate = pure ()

    interface instance Service.I for Service where
      view = Service.View with accountFactoryCid; holdingFactoryCid; claimRuleCid

      asBase = toInterface @Base.I this

      requestOpenAccount Service.RequestOpenAccount{id; description; controllers; observers} = do
        toInterfaceContractId <$> create Model.OpenAccountRequest with operator; provider; customer; id; description; controllers; observers

      requestCloseAccount Service.RequestCloseAccount{account} = do
        toInterfaceContractId <$> create Model.CloseAccountRequest with operator; provider; customer; account

      requestDeposit Service.RequestDeposit{quantity; account} = do
        toInterfaceContractId <$> create Model.DepositRequest with operator; provider; customer; quantity; account

      requestWithdraw Service.RequestWithdraw{holdingCid} = do
        toInterfaceContractId <$> create Model.WithdrawRequest with operator; provider; customer; holdingCid

      openAccount Service.OpenAccount{openAccountRequestCid} = do
        OpenAccountRequest.View{id; description; controllers; observers} <- view <$> fetchAndRemove openAccountRequestCid
        let account = AccountKey with custodian = provider; owner = customer; id
        accountCid <- exercise accountFactoryCid Account.Create with account; description; controllers; holdingFactoryCid; observers
        pure (accountCid, account)

      closeAccount Service.CloseAccount{closeAccountRequestCid} = do
        CloseAccountRequest.View{account} <- view <$> fetchAndRemove closeAccountRequestCid
        exercise accountFactoryCid Account.Remove with account

      deposit Service.Deposit{depositRequestCid} = do
        DepositRequest.View{quantity; account} <- view <$> fetchAndRemove depositRequestCid
        account.custodian === provider
        account.owner === customer
        Account.exerciseInterfaceByKey @Account.I account provider Account.Credit with quantity

      withdraw Service.Withdraw{withdrawRequestCid} = do
        WithdrawRequest.View{holdingCid} <- view <$> fetchAndRemove withdrawRequestCid
        holding <- fetch holdingCid
        let account = getAccount holding
        account.custodian === provider
        account.owner === customer
        Account.exerciseInterfaceByKey @Account.I account provider Account.Debit with holdingCid

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
    claimRuleCid : ContractId Lifecycle.Claim
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with operator; provider; customer; accountFactoryCid; holdingFactoryCid; claimRuleCid

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        accountFactoryCid : ContractId Account.F
        holdingFactoryCid : ContractId Holding.F
        claimRuleCid : ContractId Lifecycle.Claim
      controller operator, provider
      do
        create Service with operator; provider; customer; accountFactoryCid; holdingFactoryCid; claimRuleCid
