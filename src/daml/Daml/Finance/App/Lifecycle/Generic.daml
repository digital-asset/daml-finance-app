-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Lifecycle.Generic
  ( Rule(..)
  ) where

import DA.Optional (fromSome)
import DA.Set (fromList)
import DA.Text (sha256)
import Daml.Finance.App.Lifecycle.Effect (Effect(..))
import Daml.Finance.Claims.Util (isZero')
import Daml.Finance.Claims.Util.Lifecycle (lifecycle, splitPending, timeEvent)
import Daml.Finance.Instrument.Generic.Instrument (Instrument(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), getClaims)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (R, createReference, getKey)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Rule to process a time update event.
template Rule
  with
    providers : Parties
      -- ^ Providers of the distribution rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : PartiesMap
      -- ^ Observers of the distribution rule.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
  where
    signatory providers
    observer Disclosure.flattenObservers observers, lifecycler

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler; id; description
      evolve Lifecycle.Evolve{eventCid; observableCids; instrument} = do

        -- fetch event
        eventView <- view <$> fetch eventCid
        let eventTime = eventView.eventTime

        -- fetch claim tree
        claimInstrument <- fetchInterfaceByKey @BaseInstrument.R instrument
        claims <- Claim.getClaims claimInstrument $ Claim.GetClaims with actor = lifecycler

        -- lifecycle as of the time given by the event
        (remaining, pending) <-
          lifecycle lifecycler observableCids claimInstrument [timeEvent eventTime]

        -- create new instrument and return effect
        if remaining == claims && null pending then
          pure (None, [])
        else do
          let
            instrumentT = fromSome $ fromInterface @Instrument claimInstrument
            currentKey = BaseInstrument.getKey $ toInterface claimInstrument
            [claim] = fmap (.claim) remaining
            newKey = currentKey with version = sha256 $ show remaining
            producedInstrument = if isZero' remaining then None else Some newKey
          tryCreateNewInstrument lifecycler claim eventTime instrumentT newKey
          let (otherConsumed, otherProduced) = splitPending pending
          effectCid <- toInterfaceContractId <$>
            create Effect with
              providers = fromList [instrumentT.issuer, instrumentT.depository]
              id = eventView.id
              description = eventView.description
              targetInstrument = currentKey
              producedInstrument
              otherConsumed
              otherProduced
              settlementTime = Some eventTime
              observers = Disclosure.flattenObservers instrumentT.observers
          pure (Some newKey, [effectCid])

    interface instance Disclosure.I for Rule where
      view = Disclosure.View with disclosureControllers = providers; observers
      setObservers = setObserversImpl @Rule @Disclosure.I this None
      addObservers = addObserversImpl @Rule @Disclosure.I this None
      removeObservers = removeObserversImpl @Rule @Disclosure.I this None

-- | HIDE
-- Check if an instrument for the new key already exists, otherwise create it.
tryCreateNewInstrument : Party -> C -> Time -> Instrument -> InstrumentKey -> Update ()
tryCreateNewInstrument actor newClaim eventTime oldInstrument newKey = do
  existingRefCidOpt <- lookupByKey @BaseInstrument.R newKey
  case existingRefCidOpt of
    Some _ -> pure ()
    None -> do
      instrumentCid <- create oldInstrument with
        claims = newClaim
        lastEventTimestamp = eventTime
        version = newKey.version
      BaseInstrument.createReference actor $ toInterfaceContractId instrumentCid
      pure ()
