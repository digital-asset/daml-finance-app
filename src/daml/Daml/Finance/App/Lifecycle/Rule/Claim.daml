-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Lifecycle.Rule.Claim where

import DA.Set (member)
import Daml.Finance.Interface.Account.Account qualified as Account (Debit(..), I, exerciseInterfaceByKey)
import Daml.Finance.Interface.Account.Util (getAccount, getCustodian, getOwner)
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (I, Create(..))
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), GetView(..))
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), ClaimResult(..), I, View(..))
import Daml.Finance.Interface.Settlement.Factory qualified as SettlementFactory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (Discover(..), I)
import Daml.Finance.Interface.Settlement.Types (Step(..))
import Daml.Finance.Interface.Types.Common.Types (Parties, Quantity(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)
import Daml.Finance.Lifecycle.Rule.Util

-- | Type synonym for `Rule`.
type T = Rule

-- | Rule contract that allows an actor to claim effects, returning settlement instructions.
template Rule
  with
    providers : Parties
      -- ^ Provider of the claim rule. Together with the actors of the `ClaimEffect` choice the
      --   authorization requirements to upgrade the holdings being claimed have to be met.
    claimers : Parties
      -- ^ Any of the parties can claim an effect.
    settlers : Parties
      -- ^ Any of the parties can trigger settlement of the resulting batch.
    holdingFactoryCid : ContractId HoldingFactory.I
      -- ^ Holding factory contract used to create new instrument holdings.
    routeProviderCid : ContractId RouteProvider.I
      -- ^ RouteProvider used to discover settlement routes.
    settlementFactoryCid : ContractId SettlementFactory.I
      -- ^ Settlement factory contract used to create a `Batch` of `Instruction`\s.
    netInstructions : Bool
      -- ^ Configure whether netting should be enabled for quantities having the same (instrument,
      --   sender, receiver).
  where
    signatory providers
    observer claimers

    interface instance Claim.I for Rule where
      view = Claim.View with providers; claimers; settlers; routeProviderCid; settlementFactoryCid
      claimEffect Claim.ClaimEffect{claimer; holdingCids; effectCid; batchId} = do
        assertMsg "Effect can only be claimed by authorized parties." $
          claimer `member` this.claimers
        effectView <- exercise effectCid Effect.GetView with viewer = claimer
        holdings <- mapA fetch holdingCids

        -- Calculate settlement steps
        let
          createSteps consume quantities holding =
            let
              owner = getOwner holding
              custodian = getCustodian holding
              sender = if consume then owner else custodian
              receiver = if consume then custodian else owner
            in map (\quantity -> Step with sender; receiver; quantity) quantities

          calculateSteps holding = do
            Effect.CalculationResult{consumed; produced} <-
              exercise effectCid Effect.Calculate with
                actor = claimer
                quantity = Quantity with unit = getInstrument holding; amount = getAmount holding
            let
              consumedUsed = filter (\q -> q.unit /= effectView.targetInstrument) consumed
              producedUsed =
                case effectView.producedInstrument of
                  Some pInst -> filter (\q -> q.unit /= pInst) produced
                  None -> produced
              (consumedNetted, producedNetted) =
                if netInstructions
                then splitPending . net $ mergeConsumedAndProduced consumedUsed producedUsed
                else (consumedUsed, producedUsed)
              consumedSteps = createSteps True consumedNetted holding
              producedSteps = createSteps False producedNetted holding
            pure $ consumedSteps <> producedSteps

        -- Settlement steps
        steps <- mconcat <$> mapA calculateSteps holdings

        -- Discover settlement routes
        routedSteps <- exercise routeProviderCid RouteProvider.Discover with
          discoverors = providers; contextId = None; steps

        -- Generate settlement instructions for other instruments
        (batchCid, instructionCids) <- exercise settlementFactoryCid SettlementFactory.Instruct with
          instructor = claimer
          consenters = mempty
          settlers
          id = batchId
          description = effectView.description
          contextId = Some effectView.id
          routedSteps
          settlementTime = effectView.settlementTime

        -- Upgrade instrument holdings
        let
          updateInstrumentHolding (holding, holdingCid) = do
            let
              account = getAccount holding
              amount = getAmount holding
              observers = (view $ toInterface @Disclosure.I holding).observers
            -- Debit old instrument
            Account.exerciseInterfaceByKey @Account.I account claimer Account.Debit with holdingCid
            -- Credit new instrument
            case effectView.producedInstrument of
              Some pi -> Some <$> exercise holdingFactoryCid HoldingFactory.Create with
                instrument = pi
                account
                amount
                observers
              None -> pure None

        newInstrumentHoldingCids <- fmap sequence . mapA updateInstrumentHolding $ zip holdings holdingCids

        pure Claim.ClaimResult with batchCid; instructionCids
