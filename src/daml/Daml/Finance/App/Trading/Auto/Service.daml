-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Trading.Auto.Service where

import Daml.Finance.App.Trading.Model (Order, Side)
import Daml.Finance.App.Trading.Service qualified as S (CancelOrder(..), CreateOrder(..), RequestCancelOrder(..), RequestCreateOrder(..), Service)
import Daml.Finance.Interface.Holding.Account qualified as Account (K)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (Q)
import Daml.Finance.Interface.Types.Common (Parties)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestAndCreateOrder : Optional (ContractId Order, Order)
      with
        id : Text
        listingId : Text
        quantity : Instrument.Q
        price : Instrument.Q
        side : Side
        collateralCid : ContractId Fungible.I
        account : Account.K
        orderCids : [ContractId Order]
        observers : Parties
      controller customer
      do
        createOrderRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateOrder with id; listingId; quantity; price; side; collateralCid; account; orderCids; observers
        exerciseByKey @S.Service (operator, provider, customer) S.CreateOrder with createOrderRequestCid

    nonconsuming choice RequestAndCancelOrder : ()
      with
        orderCid : ContractId Order
      controller customer
      do
        cancelOrderRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCancelOrder with orderCid
        exerciseByKey @S.Service (operator, provider, customer) S.CancelOrder with cancelOrderRequestCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
