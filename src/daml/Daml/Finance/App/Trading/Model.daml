-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Trading.Model where

import DA.Set (fromList, singleton)
import Daml.Finance.App.Settlement.Service qualified as Settlement (DiscoverAndInstruct(..), Service)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Split(..), SplitResult(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I, Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (I)
import Daml.Finance.Interface.Settlement.Types (Allocation(Pledge), Approval(TakeDelivery), Step(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), InstrumentQuantity, Parties)
import Daml.Finance.Interface.Util.Common (qty)

data Side
    = Buy
    | Sell
  deriving (Eq, Show)

data FillResult = FillResult
  with
    orderOpt : Optional (ContractId Order, Order)
    batchCid : ContractId Batch.I
    instructionCid : ContractId Instruction.I
  deriving (Eq, Show)

template Order
  with
    operator : Party
    provider : Party
    customer : Party
    id : Id
    timestamp : Time
    listingId : Text
    quantity : InstrumentQuantity
    side : Side
    price : InstrumentQuantity
    collateralCid : ContractId Fungible.I
    account : AccountKey
    observers : Parties
  where
    signatory operator, provider, customer
    observer observers

    key (operator, provider, id) : (Party, Party, Id)
    maintainer key._1

    choice Fill : FillResult
      with
        settlementServiceCid : ContractId Settlement.Service
        other : Order
        isResting : Bool
      controller provider
      do
        let
          paid = if isResting then price.amount else other.price.amount
          delivered = min quantity.amount other.quantity.amount
          amount = if side == Buy then paid * delivered else delivered
          remaining = quantity.amount - min quantity.amount other.quantity.amount
          deliverable = if side == Buy then price.unit else quantity.unit
          step = Step with sender = customer; receiver = other.customer; quantity = qty amount deliverable
        (batchCid, [instructionCid]) <- exercise settlementServiceCid Settlement.DiscoverAndInstruct
          with
            actor = provider
            id
            settlers = singleton provider
            steps = [step]
            contextId = Some id
            description = show id
            settlementTime = None
        Fungible.SplitResult [splitCid] restCidOpt <- exercise collateralCid Fungible.Split with amounts = [ amount ]
        if remaining == 0.0
        then do
          instructionCid <- fst <$> exercise instructionCid Instruction.Allocate with actors = fromList [provider, customer]; allocation = Pledge $ toInterfaceContractId splitCid
          pure FillResult with orderOpt = None; batchCid; instructionCid
        else do
          instructionCid <- fst <$> exercise instructionCid Instruction.Allocate with actors = fromList [provider, customer]; allocation = Pledge $ toInterfaceContractId splitCid
          case restCidOpt of
            Some restCid -> do
              let new = this with quantity.amount = remaining; collateralCid = restCid
              newCid <- create new
              pure FillResult with orderOpt = Some (newCid, new); batchCid; instructionCid
            None -> fail "Insufficient collateral - this should never happen"

    nonconsuming choice ApproveInstruction : ContractId Instruction.I
      with
        instructionCid : ContractId Instruction.I
      controller provider
      do
        exercise instructionCid Instruction.Approve with actors = fromList [provider, customer]; approval = TakeDelivery account

template CreateOrderRequest
  with
    operator : Party
    provider : Party
    customer : Party
    id : Id
    timestamp : Time
    listingId : Text
    quantity : InstrumentQuantity
    side : Side
    price : InstrumentQuantity
    collateralCid : ContractId Fungible.I
    account : AccountKey
    orderCids : [ContractId Order]
    observers : Parties
  where
    signatory operator, provider, customer

    key (operator, provider, id) : (Party, Party, Id)
    maintainer key._1

template CancelOrderRequest
  with
    provider : Party
    customer : Party
    operator : Party
    orderCid : ContractId Order
  where
    signatory provider, customer
