-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Settlement.Service where

import DA.Set qualified as S (empty, singleton)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (I)
import Daml.Finance.Interface.Settlement.Factory qualified as SettlementFactory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I, Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (Discover(..), I)
import Daml.Finance.Interface.Settlement.Types qualified as Settlement (Allocation, Approval, Step)
import Daml.Finance.Interface.Types.Common.Types (Id, Parties)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId SettlementFactory.I
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice AllocateInstruction : ContractId Instruction.I
      with
        actor : Party
        instructionCid : ContractId Instruction.I
        allocation : Settlement.Allocation
      controller actor
      do
        assertMsg "Actor must be provider or customer" $ actor == customer || actor == provider
        fst <$> exercise instructionCid Instruction.Allocate with actors = S.singleton actor; allocation

    nonconsuming choice ApproveInstruction : ContractId Instruction.I
      with
        actor : Party
        instructionCid : ContractId Instruction.I
        approval : Settlement.Approval
      controller actor
      do
        assertMsg "Actor must be provider or customer" $ actor == customer || actor == provider
        exercise instructionCid Instruction.Approve with actors = S.singleton actor; approval

    nonconsuming choice DiscoverAndInstruct : (ContractId Batch.I, [ContractId Instruction.I])
      with
        actor : Party
        settlers : Parties
        id : Id
        description : Text
        contextId : Optional Id
        settlementTime : Optional Time
        steps : [Settlement.Step]
      controller actor
      do
        routedSteps <- exercise routeProviderCid RouteProvider.Discover with discoverors = S.singleton actor; contextId = None; steps
        exercise settlementFactoryCid SettlementFactory.Instruct with instructor = actor; consenters = S.empty; settlers; id; description; contextId; settlementTime; routedSteps

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId SettlementFactory.I
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with operator; provider; customer; routeProviderCid, settlementFactoryCid

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        routeProviderCid : ContractId RouteProvider.I
        settlementFactoryCid : ContractId SettlementFactory.I
      controller operator, provider
      do
        create Service with operator; provider; customer; routeProviderCid; settlementFactoryCid
