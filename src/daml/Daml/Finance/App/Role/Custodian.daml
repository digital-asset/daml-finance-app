-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Role.Custodian where

import Daml.Finance.App.BackToBack.Service qualified as BackToBack (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Custody.Service qualified as Custody (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Issuance.Auto.Service qualified as IssuanceAuto (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Issuance.Service qualified as Issuance (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Lending.Service qualified as Lending (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Lifecycle.Service qualified as Lifecycle (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Settlement.Service qualified as Settlement (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Structuring.Auto.Service qualified as StructuringAuto (Approve(..), Offer(..), Request, Service, Terminate(..))
import Daml.Finance.App.Structuring.Service qualified as Structuring (Approve(..), Factories, Offer(..), Request, Service, Terminate(..))
import Daml.Finance.Interface.Account.Factory qualified as AccountFactory (I)
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Lifecycle (Claim)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I)
import Daml.Finance.Interface.Settlement.Factory qualified as SettlementFactory (I)
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (I)

template Role
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) :  (Party, Party)
    maintainer key._1

    nonconsuming choice OfferCustodyService : ContractId Custody.Offer
      with
        customer : Party
        claimRuleCid : ContractId Lifecycle.Claim
        accountFactoryCid : ContractId AccountFactory.I
        holdingFactoryCid : ContractId HoldingFactory.I
      controller provider
      do
        create Custody.Offer with operator; provider; customer; claimRuleCid; accountFactoryCid; holdingFactoryCid

    nonconsuming choice ApproveCustodyRequest : ContractId Custody.Service
      with
        custodyRequestCid : ContractId Custody.Request
        claimRuleCid : ContractId Lifecycle.Claim
        accountFactoryCid : ContractId AccountFactory.I
        holdingFactoryCid : ContractId HoldingFactory.I
      controller provider
      do
        exercise custodyRequestCid Custody.Approve with operator; claimRuleCid; accountFactoryCid; holdingFactoryCid

    nonconsuming choice TerminateCustodyService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Custody.Service (operator, provider, customer) Custody.Terminate with actor = provider

    nonconsuming choice OfferIssuanceService : ContractId Issuance.Offer
      with
        customer : Party
      controller provider
      do
        create Issuance.Offer with ..

    nonconsuming choice ApproveIssuanceRequest : ContractId Issuance.Service
      with
        issuanceServiceRequestCid : ContractId Issuance.Request
      controller provider
      do
        exercise issuanceServiceRequestCid Issuance.Approve with ..

    nonconsuming choice TerminateIssuanceService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Issuance.Service (operator, provider, customer) Issuance.Terminate with actor = provider

    nonconsuming choice OfferIssuanceAutoService : ContractId IssuanceAuto.Offer
      with
        customer : Party
      controller provider
      do
        create IssuanceAuto.Offer with ..

    nonconsuming choice ApproveIssuanceAutoRequest : ContractId IssuanceAuto.Service
      with
        issuanceServiceRequestCid : ContractId IssuanceAuto.Request
      controller provider
      do
        exercise issuanceServiceRequestCid IssuanceAuto.Approve with ..

    nonconsuming choice TerminateIssuanceAutoService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @IssuanceAuto.Service (operator, provider, customer) IssuanceAuto.Terminate with actor = provider

    nonconsuming choice OfferBackToBackService : ContractId BackToBack.Offer
      with
        customer : Party
        settlementServiceCid : ContractId Settlement.Service
      controller provider
      do
        create BackToBack.Offer with ..

    nonconsuming choice ApproveBackToBackRequest : ContractId BackToBack.Service
      with
        backToBackServiceRequestCid : ContractId BackToBack.Request
        settlementServiceCid : ContractId Settlement.Service
      controller provider
      do
        exercise backToBackServiceRequestCid BackToBack.Approve with ..

    nonconsuming choice TerminateBackToBackService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @BackToBack.Service (operator, provider, customer) BackToBack.Terminate with actor = provider

    nonconsuming choice OfferSettlementService : ContractId Settlement.Offer
      with
        customer : Party
        routeProviderCid : ContractId RouteProvider.I
        settlementFactoryCid : ContractId SettlementFactory.I
      controller provider
      do
        create Settlement.Offer with ..

    nonconsuming choice ApproveSettlementRequest : ContractId Settlement.Service
      with
        settlementServiceRequestCid : ContractId Settlement.Request
        routeProviderCid : ContractId RouteProvider.I
        settlementFactoryCid : ContractId SettlementFactory.I
      controller provider
      do
        exercise settlementServiceRequestCid Settlement.Approve with ..

    nonconsuming choice TerminateSettlementService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Settlement.Service (operator, provider, customer) Settlement.Terminate with actor = provider

    nonconsuming choice OfferStructuringService : ContractId Structuring.Offer
      with
        customer : Party
        factories : Structuring.Factories
      controller provider
      do
        create Structuring.Offer with ..

    nonconsuming choice ApproveStructuringRequest : ContractId Structuring.Service
      with
        structuringServiceRequestCid : ContractId Structuring.Request
        factories : Structuring.Factories
      controller provider
      do
        exercise structuringServiceRequestCid Structuring.Approve with ..

    nonconsuming choice TerminateStructuringService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Structuring.Service (operator, provider, customer) Structuring.Terminate with actor = provider

    nonconsuming choice OfferStructuringAutoService : ContractId StructuringAuto.Offer
      with
        customer : Party
      controller provider
      do
        create StructuringAuto.Offer with ..

    nonconsuming choice ApproveStructuringAutoRequest : ContractId StructuringAuto.Service
      with
        structuringServiceRequestCid : ContractId StructuringAuto.Request
      controller provider
      do
        exercise structuringServiceRequestCid StructuringAuto.Approve with ..

    nonconsuming choice TerminateStructuringAutoService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @StructuringAuto.Service (operator, provider, customer) StructuringAuto.Terminate with actor = provider

    nonconsuming choice OfferLifecycleService : ContractId Lifecycle.Offer
      with
        customer : Party
        distributionRuleCid : ContractId Lifecycle.I
        replacementRuleCid : ContractId Lifecycle.I
        genericRuleCid : ContractId Lifecycle.I
        dynamicRuleCid : ContractId Lifecycle.I
      controller provider
      do
        create Lifecycle.Offer with ..

    nonconsuming choice ApproveLifecycleRequest : ContractId Lifecycle.Service
      with
        lifecycleServiceRequestCid : ContractId Lifecycle.Request
        distributionRuleCid : ContractId Lifecycle.I
        replacementRuleCid : ContractId Lifecycle.I
        genericRuleCid : ContractId Lifecycle.I
        dynamicRuleCid : ContractId Lifecycle.I
      controller provider
      do
        exercise lifecycleServiceRequestCid Lifecycle.Approve with ..

    nonconsuming choice TerminateLifecycleService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Lifecycle.Service (operator, provider, customer) Lifecycle.Terminate with actor = provider

    nonconsuming choice OfferLendingService : ContractId Lending.Offer
      with
        customer : Party
      controller provider
      do
        create Lending.Offer with ..

    nonconsuming choice ApproveLendingRequest : ContractId Lending.Service
      with
        lendingServiceRequestCid : ContractId Lending.Request
      controller provider
      do
        exercise lendingServiceRequestCid Lending.Approve with ..

    nonconsuming choice TerminateLendingService : ()
      with
        customer : Party
      controller provider
      do
        exerciseByKey @Lending.Service (operator, provider, customer) Lending.Terminate with actor = provider

    choice TerminateRole: ()
      controller operator
      do
        return ()

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator
    observer provider

    choice Accept : ContractId Role
      controller provider
      do
        create Role with ..

    choice Decline : ()
      controller provider
      do
        return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider
    observer operator

    choice Approve : ContractId Role
      controller operator
      do
        create Role with ..

    choice Reject : ()
      controller operator
      do
        return ()
