-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Structuring.Service where

import DA.Date (toGregorian)
import Daml.Finance.App.Structuring.Model
import Daml.Finance.App.Util (fetchAndArchive)
import Daml.Finance.Interface.Instrument.Base.Factory qualified as Base (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, K)
import Daml.Finance.Interface.Instrument.Bond.FixedRate qualified as FixedRateBond (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Bond.FloatingRate qualified as FloatingRateBond (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Bond.InflationLinked qualified as InflationLinkedBond (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Bond.ZeroCoupon qualified as ZeroCouponBond (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Equity.Factory qualified as Equity (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Generic.Factory qualified as Generic (Factory, Create(..))
import Daml.Finance.Interface.Instrument.Generic.Types (C)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..), BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum, RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), Observers)

data Factories = Factories
  with
    base : ContractId Base.Factory
    equity : ContractId Equity.Factory
    generic : ContractId Generic.Factory
    fixedRateBond : ContractId FixedRateBond.Factory
    floatingRateBond : ContractId FloatingRateBond.Factory
    inflationLinkedBond : ContractId InflationLinkedBond.Factory
    zeroCouponBond : ContractId ZeroCouponBond.Factory
  deriving (Eq, Show)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    factories : Factories
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestCreateBase : ContractId CreateBaseRequest
      with
        id : Text
        description : Text
        validAsOf : Time
        observers : Observers
      controller customer
      do
        create CreateBaseRequest with ..

    nonconsuming choice RequestCreateEquity : ContractId CreateEquityRequest
      with
        id : Id
        description : Text
        version : Text
        validAsOf : Time
        observers : Observers
      controller customer
      do
        create CreateEquityRequest with ..

    nonconsuming choice RequestCreateGeneric : ContractId CreateGenericRequest
      with
        id : Text
        description : Text
        claims : C
        acquisitionTime : Time
        lastEventTimestamp : Time
        observers : Observers
      controller customer
      do
        create CreateGenericRequest with ..

    nonconsuming choice RequestCreateFixedRateBond : ContractId CreateFixedRateBondRequest
      with
        id : Text
        description : Text
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateFixedRateBondRequest with ..

    nonconsuming choice RequestCreateFloatingRateBond : ContractId CreateFloatingRateBondRequest
      with
        id : Text
        description : Text
        referenceRateId : Text
        couponSpread : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateFloatingRateBondRequest with ..

    nonconsuming choice RequestCreateInflationLinkedBond : ContractId CreateInflationLinkedBondRequest
      with
        id : Text
        description : Text
        inflationIndexId : Text
        inflationIndexBaseValue : Decimal
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateInflationLinkedBondRequest with ..

    nonconsuming choice RequestCreateZeroCouponBond : ContractId CreateZeroCouponBondRequest
      with
        id : Text
        description : Text
        issueDate : Date
        maturityDate : Date
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateZeroCouponBondRequest with ..

    nonconsuming choice CreateBase : ContractId Instrument.I
      with
        createBaseRequestCid : ContractId CreateBaseRequest
      controller provider
      do
        CreateBaseRequest{..} <- fetchAndArchive createBaseRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
        exercise factories.base Base.Create with ..

    nonconsuming choice CreateEquity : ContractId Instrument.I
      with
        createEquityRequestCid : ContractId CreateEquityRequest
      controller provider
      do
        CreateEquityRequest{..} <- fetchAndArchive createEquityRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id; version
        exercise factories.equity Equity.Create with ..

    nonconsuming choice CreateGeneric : ContractId Instrument.I
      with
        createGenericRequestCid : ContractId CreateGenericRequest
      controller provider
      do
        CreateGenericRequest{..} <- fetchAndArchive createGenericRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
        exercise factories.generic Generic.Create with ..

    nonconsuming choice CreateFixedRateBond : ContractId Instrument.I
      with
        createFixedRateBondRequestCid : ContractId CreateFixedRateBondRequest
      controller provider
      do
        CreateFixedRateBondRequest{..} <- fetchAndArchive createFixedRateBondRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
          periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        exercise factories.fixedRateBond FixedRateBond.Create with ..

    nonconsuming choice CreateFloatingRateBond : ContractId Instrument.I
      with
        createFloatingRateBondRequestCid : ContractId CreateFloatingRateBondRequest
      controller provider
      do
        CreateFloatingRateBondRequest{..} <- fetchAndArchive createFloatingRateBondRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
          periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        exercise factories.floatingRateBond FloatingRateBond.Create with ..

    nonconsuming choice CreateInflationLinkedBond : ContractId Instrument.I
      with
        createInflationLinkedBondRequestCid : ContractId CreateInflationLinkedBondRequest
      controller provider
      do
        CreateInflationLinkedBondRequest{..} <- fetchAndArchive createInflationLinkedBondRequestCid
        let
          instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
          periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        exercise factories.inflationLinkedBond InflationLinkedBond.Create with ..

    nonconsuming choice CreateZeroCouponBond : ContractId Instrument.I
      with
        createZeroCouponBondRequestCid : ContractId CreateZeroCouponBondRequest
      controller provider
      do
        CreateZeroCouponBondRequest{..} <- fetchAndArchive createZeroCouponBondRequestCid
        let instrument = InstrumentKey with depository = provider; issuer = customer; id = Id id; version = "0"
        exercise factories.zeroCouponBond ZeroCouponBond.Create with ..

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    factories : Factories
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        factories : Factories
      controller operator, provider
      do
        create Service with ..

-- | Create a schedule for the periodic coupon payments.
createCouponPeriodicSchedule : Date -> [Text] -> BusinessDayConventionEnum -> PeriodEnum -> Int -> Date -> Date -> PeriodicSchedule
createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate = do
  let
    (y, m, d) = toGregorian firstCouponDate
    periodicSchedule = PeriodicSchedule with
      businessDayAdjustment =
        BusinessDayAdjustment with
          calendarIds = holidayCalendarIds
          convention = businessDayConvention
      effectiveDateBusinessDayAdjustment = None
      terminationDateBusinessDayAdjustment = None
      frequency =
        Frequency with
          rollConvention = DOM d
          period = couponPeriod
          periodMultiplier = couponPeriodMultiplier
      effectiveDate = issueDate
      firstRegularPeriodStartDate = Some firstCouponDate
      lastRegularPeriodEndDate = Some maturityDate
      stubPeriodType = None
      terminationDate = maturityDate
  periodicSchedule