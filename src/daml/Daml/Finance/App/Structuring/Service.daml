-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Structuring.Service where

import DA.Date (toGregorian)
import Daml.Finance.App.Structuring.Model (CreateFixedRateBondRequest(..), CreateFloatingRateBondRequest(..), CreateInflationLinkedBondRequest(..), CreateZeroCouponBondRequest(..))
import Daml.Finance.App.Util (fetchAndArchive)
import Daml.Finance.Instrument.Bond.FixedRate qualified as FixedRateBond (Instrument(..))
import Daml.Finance.Instrument.Bond.FloatingRate qualified as FloatingRateBond (Instrument(..))
import Daml.Finance.Instrument.Bond.InflationLinked qualified as InflationLinkedBond (Instrument(..))
import Daml.Finance.Instrument.Bond.ZeroCoupon qualified as ZeroCouponBond (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Instrument.Generic.HasClaims qualified as Generic (HasClaims, getClaims)
import Daml.Finance.Interface.Instrument.Generic.Types qualified as Generic (TaggedClaim)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..), BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum, RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Interface.Types.Common (Id(..), Observers)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice GetClaims : [Generic.TaggedClaim]
      with
        instrumentCid : ContractId Generic.HasClaims
      controller customer
      do
        instrument <- fetch instrumentCid
        Generic.getClaims instrument

    nonconsuming choice RequestCreateFixedRateBond : ContractId CreateFixedRateBondRequest
      with
        id : Text
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateFixedRateBondRequest with ..

    nonconsuming choice RequestCreateFloatingRateBond : ContractId CreateFloatingRateBondRequest
      with
        id : Text
        referenceRateId : Text
        couponSpread : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateFloatingRateBondRequest with ..

    nonconsuming choice RequestCreateInflationLinkedBond : ContractId CreateInflationLinkedBondRequest
      with
        id : Text
        inflationIndexId : Text
        inflationIndexBaseValue : Decimal
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateInflationLinkedBondRequest with ..

    nonconsuming choice RequestCreateZeroCouponBond : ContractId CreateZeroCouponBondRequest
      with
        id : Text
        issueDate : Date
        maturityDate : Date
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        create CreateZeroCouponBondRequest with ..

    nonconsuming choice CreateFixedRateBond : ContractId FixedRateBond.Instrument
      with
        createFixedRateBondRequestCid : ContractId CreateFixedRateBondRequest
      controller provider
      do
        CreateFixedRateBondRequest{..} <- fetchAndArchive createFixedRateBondRequestCid
        let periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        create FixedRateBond.Instrument with depository = provider; issuer = customer; id = Id id; version = "0"; calendarDataProvider; description = id; ..

    nonconsuming choice CreateFloatingRateBond : ContractId FloatingRateBond.Instrument
      with
        createFloatingRateBondRequestCid : ContractId CreateFloatingRateBondRequest
      controller provider
      do
        CreateFloatingRateBondRequest{..} <- fetchAndArchive createFloatingRateBondRequestCid
        let periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        create FloatingRateBond.Instrument with depository = provider; issuer = customer; id = Id id; version = "0"; calendarDataProvider; description = id; ..

    nonconsuming choice CreateInflationLinkedBond : ContractId InflationLinkedBond.Instrument
      with
        createInflationLinkedBondRequestCid : ContractId CreateInflationLinkedBondRequest
      controller provider
      do
        CreateInflationLinkedBondRequest{..} <- fetchAndArchive createInflationLinkedBondRequestCid
        let periodicSchedule = createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
        create InflationLinkedBond.Instrument with depository = provider; issuer = customer; id = Id id; version = "0"; calendarDataProvider; description = id; ..

    nonconsuming choice CreateZeroCouponBond : ContractId ZeroCouponBond.Instrument
      with
        createZeroCouponBondRequestCid : ContractId CreateZeroCouponBondRequest
      controller provider
      do
        CreateZeroCouponBondRequest{..} <- fetchAndArchive createZeroCouponBondRequestCid
        create ZeroCouponBond.Instrument with depository = provider; issuer = customer; id = Id id; version = "0"; description = id; ..

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..

-- | Create a schedule for the periodic coupon payments.
createCouponPeriodicSchedule : Date -> [Text] -> BusinessDayConventionEnum -> PeriodEnum -> Int -> Date -> Date -> PeriodicSchedule
createCouponPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate = do
  let
    (y, m, d) = toGregorian firstCouponDate
    periodicSchedule = PeriodicSchedule with
      businessDayAdjustment =
        BusinessDayAdjustment with
          calendarIds = holidayCalendarIds
          convention = businessDayConvention
      effectiveDateBusinessDayAdjustment = None
      terminationDateBusinessDayAdjustment = None
      frequency =
        Frequency with
          rollConvention = DOM d
          period = couponPeriod
          periodMultiplier = couponPeriodMultiplier
      effectiveDate = issueDate
      firstRegularPeriodStartDate = Some firstCouponDate
      lastRegularPeriodEndDate = Some maturityDate
      stubPeriodType = None
      terminationDate = maturityDate
  periodicSchedule