-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Structuring.Auto.Service where

import Daml.Finance.App.Structuring.Service qualified as S
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, K)
import Daml.Finance.Interface.Instrument.Generic.Types (C)
import Daml.Finance.Interface.Types.Common (Id, Observers)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestAndCreateBase : ContractId Instrument.I
      with
        id : Text
        description : Text
        validAsOf : Time
        observers : Observers
      controller customer
      do
        createBaseRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateBase with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateBase with createBaseRequestCid

    nonconsuming choice RequestAndCreateEquity : ContractId Instrument.I
      with
        id : Id
        description : Text
        version : Text
        validAsOf : Time
        observers : Observers
      controller customer
      do
        createEquityRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateEquity with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateEquity with createEquityRequestCid

    nonconsuming choice RequestAndCreateGeneric : ContractId Instrument.I
      with
        id : Text
        description : Text
        claims : C
        acquisitionTime : Time
        lastEventTimestamp : Time
        observers : Observers
      controller customer
      do
        createGenericRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateGeneric with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateGeneric with createGenericRequestCid

    nonconsuming choice RequestAndCreateFixedRateBond : ContractId Instrument.I
      with
        id : Text
        description : Text
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        createFixedRateBondRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateFixedRateBond with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateFixedRateBond with createFixedRateBondRequestCid

    nonconsuming choice RequestAndCreateFloatingRateBond : ContractId Instrument.I
      with
        id : Text
        description : Text
        referenceRateId : Text
        couponSpread : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        createFloatingRateBondRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateFloatingRateBond with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateFloatingRateBond with createFloatingRateBondRequestCid

    nonconsuming choice RequestAndCreateInflationLinkedBond : ContractId Instrument.I
      with
        id : Text
        description : Text
        inflationIndexId : Text
        inflationIndexBaseValue : Decimal
        couponRate : Decimal
        issueDate : Date
        firstCouponDate : Date
        maturityDate : Date
        holidayCalendarIds : [Text]
        calendarDataProvider : Party
        dayCountConvention : DayCountConventionEnum
        businessDayConvention : BusinessDayConventionEnum
        couponPeriod : PeriodEnum
        couponPeriodMultiplier : Int
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        createInflationLinkedBondRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateInflationLinkedBond with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateInflationLinkedBond with createInflationLinkedBondRequestCid

    nonconsuming choice RequestAndCreateZeroCouponBond : ContractId Instrument.I
      with
        id : Text
        description : Text
        issueDate : Date
        maturityDate : Date
        currency : Instrument.K
        observers : Observers
        lastEventTimestamp : Time
      controller customer
      do
        createZeroCouponBondRequestCid <- exerciseByKey @S.Service (operator, provider, customer) S.RequestCreateZeroCouponBond with ..
        exerciseByKey @S.Service (operator, provider, customer) S.CreateZeroCouponBond with createZeroCouponBondRequestCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
