-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Structuring.Auto where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Structuring.Auto qualified as Auto
import Daml.Finance.App.Interface.Structuring.Service qualified as Service
import Daml.Finance.App.Structuring.Service qualified as Service (T)

type T = Service

instance Auto.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer
      terminate = pure ()

    interface instance Auto.I for Service where
      view = Auto.View

      asBase = toInterface @Base.I this

      requestAndCreateToken Auto.RequestAndCreateToken{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createTokenRequestCid <- exercise serviceCid Service.RequestCreateToken with ..
        exercise serviceCid Service.CreateToken with createTokenRequestCid

      requestAndCreateEquity Auto.RequestAndCreateEquity{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createEquityRequestCid <- exercise serviceCid Service.RequestCreateEquity with ..
        exercise serviceCid Service.CreateEquity with createEquityRequestCid

      requestAndCreateGeneric Auto.RequestAndCreateGeneric{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createGenericRequestCid <- exercise serviceCid Service.RequestCreateGeneric with ..
        exercise serviceCid Service.CreateGeneric with createGenericRequestCid

      requestAndCreateFixedRateBond Auto.RequestAndCreateFixedRateBond{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createFixedRateBondRequestCid <- exercise serviceCid Service.RequestCreateFixedRateBond with ..
        exercise serviceCid Service.CreateFixedRateBond with createFixedRateBondRequestCid

      requestAndCreateFloatingRateBond Auto.RequestAndCreateFloatingRateBond{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createFloatingRateBondRequestCid <- exercise serviceCid Service.RequestCreateFloatingRateBond with ..
        exercise serviceCid Service.CreateFloatingRateBond with createFloatingRateBondRequestCid

      requestAndCreateInflationLinkedBond Auto.RequestAndCreateInflationLinkedBond{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createInflationLinkedBondRequestCid <- exercise serviceCid Service.RequestCreateInflationLinkedBond with ..
        exercise serviceCid Service.CreateInflationLinkedBond with createInflationLinkedBondRequestCid

      requestAndCreateZeroCouponBond Auto.RequestAndCreateZeroCouponBond{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createZeroCouponBondRequestCid <- exercise serviceCid Service.RequestCreateZeroCouponBond with ..
        exercise serviceCid Service.CreateZeroCouponBond with createZeroCouponBondRequestCid

      requestAndCreateFpmlSwap Auto.RequestAndCreateFpmlSwap{..} = do
        serviceCid <- toInterfaceContractId @Service.I . fst <$> fetchByKey @Service.T (operator, provider, customer)
        createFpmlSwapRequestCid <- exercise serviceCid Service.RequestCreateFpmlSwap with ..
        exercise serviceCid Service.CreateFpmlSwap with createFpmlSwapRequestCid

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
