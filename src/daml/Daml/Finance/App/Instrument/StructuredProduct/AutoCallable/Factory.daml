-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Instrument.StructuredProduct.AutoCallable.Factory where

import DA.Set (singleton)
import Daml.Finance.App.Instrument.StructuredProduct.AutoCallable.Instrument qualified as AutoCallable (Instrument(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, getClaims)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (createReference)
import Daml.Finance.App.Interface.Instrument.StructuredProduct.AutoCallable.Factory qualified as AutoCallableFactory (Create(..), I, View(..))
import Daml.Finance.App.Interface.Instrument.StructuredProduct.AutoCallable.Types (AutoCallable(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type T = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance AutoCallableFactory.I for Factory where
      view = AutoCallableFactory.View with provider
      create' AutoCallableFactory.Create{
        autoCallable = AutoCallable{instrument; description; referenceAssetId; putStrike;
          couponBarrier; callBarrier; finalBarrier; currency; lastEventTimestamp; couponRate;
          observationSchedule; periodicSchedule; holidayCalendarIds; calendarDataProvider;
          dayCountConvention; notional; prevEvents};
        observers} = do
          let
            acInstrument = AutoCallable.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              holdingStandard = instrument.holdingStandard
              description
              referenceAssetId
              putStrike
              couponBarrier
              callBarrier
              finalBarrier
              couponRate
              observationSchedule
              periodicSchedule
              holidayCalendarIds
              calendarDataProvider
              dayCountConvention
              currency
              notional
              lastEventTimestamp
              observers
              prevEvents
          cid <- toInterfaceContractId <$> create acInstrument
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          -- Get the claims in order to run the associated checks (e.g. verify that the schedules
          -- are valid).
          Claim.getClaims (toInterface @Claim.I acInstrument) $
            Claim.GetClaims with actor = instrument.issuer
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
