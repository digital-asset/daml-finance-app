-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Lending.Model where

import DA.Set (singleton)
import Daml.Finance.Interface.Account.Account qualified as Account (exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I, Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentQuantity)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, RemoveObservers(..))

template BorrowOfferRequest
  with
    operator : Party
    provider : Party
    customer : Party
    id : Text
    borrowed : InstrumentQuantity
    maturity : Date
  where
    signatory operator, provider, customer

    key (operator, provider, id) : (Party, Party, Text)
    maintainer key._1

template BorrowOffer
  with
    operator : Party
    provider : Party
    customer : Party
    id : Text
    borrowed : InstrumentQuantity
    maturity : Date
    interest : InstrumentQuantity
    collateral : InstrumentQuantity
    borrowedCid : ContractId Transferable.I
    lenderBorrowedAccount : AccountKey
    lenderInterestAccount : AccountKey
  where
    signatory operator, provider, customer

    key (operator, provider, id) : (Party, Party, Text)
    maintainer key._1

template BorrowAgreement
  with
    operator : Party
    provider : Party
    customer : Party
    id : Text
    borrowed : InstrumentQuantity
    maturity : Date
    interest : InstrumentQuantity
    collateral : InstrumentQuantity
    collateralCid : ContractId Transferable.I
    lenderBorrowedAccount : AccountKey
    lenderInterestAccount : AccountKey
  where
    signatory operator, provider, customer

    key (operator, provider, id) : (Party, Party, Text)
    maintainer key._1

    choice Repay : (ContractId Transferable.I, ContractId Transferable.I, ContractId Transferable.I)
      with
        borrowedCid : ContractId Transferable.I
        interestCid : ContractId Transferable.I
      controller customer
      do
        borrowedCid <- exercise borrowedCid Transferable.Transfer with actors = singleton customer; newOwnerAccount = lenderBorrowedAccount
        interestCid <- exercise interestCid Transferable.Transfer with actors = singleton customer; newOwnerAccount = lenderInterestAccount
        unlockedCid <- coerceContractId <$> exercise (toInterfaceContractId collateralCid : ContractId Holding.I) Holding.Release with context = id
        Account.exerciseInterfaceByKey @Disclosure.I lenderBorrowedAccount provider Disclosure.RemoveObservers with disclosers = singleton customer; observersToRemove = (id, singleton customer)
        Account.exerciseInterfaceByKey @Disclosure.I lenderInterestAccount provider Disclosure.RemoveObservers with disclosers = singleton customer; observersToRemove = (id, singleton customer)
        pure (unlockedCid, borrowedCid, interestCid)
