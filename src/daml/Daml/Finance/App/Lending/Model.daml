-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Lending.Model where

import DA.Set (fromList, singleton)
import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, View(..))
import Daml.Finance.App.Interface.Lending.BorrowAgreement qualified as BorrowAgreement (I, Repay(..), View(..))
import Daml.Finance.App.Interface.Lending.BorrowOffer qualified as BorrowOffer (I, View(..))
import Daml.Finance.App.Interface.Lending.BorrowOfferRequest qualified as BorrowOfferRequest (I, View(..))
import Daml.Finance.Interface.Account.Account qualified as Account (exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I, Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id, InstrumentQuantity)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, RemoveObservers(..))

template BorrowOfferRequest
  with
    operator : Party
    provider : Party
    customer : Party
    dealId : Id
    description : Text
    borrowed : InstrumentQuantity
    maturity : Date
  where
    signatory operator, provider, customer

    key (operator, provider, dealId) : (Party, Party, Id)
    maintainer key._1

    interface instance Removable.I for BorrowOfferRequest where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance BorrowOfferRequest.I for BorrowOfferRequest where
      view = BorrowOfferRequest.View with operator; provider; customer; dealId; description; borrowed; maturity

      asRemovable = toInterface @Removable.I this

template BorrowOffer
  with
    operator : Party
    provider : Party
    customer : Party
    dealId : Id
    description : Text
    borrowed : InstrumentQuantity
    maturity : Date
    interest : InstrumentQuantity
    collateral : InstrumentQuantity
    borrowedCid : ContractId Transferable.I
    lenderBorrowedAccount : AccountKey
    lenderInterestAccount : AccountKey
  where
    signatory operator, provider, customer

    key (operator, provider, dealId) : (Party, Party, Id)
    maintainer key._1

    interface instance Removable.I for BorrowOffer where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance BorrowOffer.I for BorrowOffer where
      view = BorrowOffer.View with operator; provider; customer; dealId; description; borrowed; maturity; interest; collateral; borrowedCid; lenderBorrowedAccount; lenderInterestAccount

      asRemovable = toInterface @Removable.I this

template BorrowAgreement
  with
    operator : Party
    provider : Party
    customer : Party
    dealId : Id
    description : Text
    borrowed : InstrumentQuantity
    maturity : Date
    interest : InstrumentQuantity
    collateral : InstrumentQuantity
    collateralCid : ContractId Transferable.I
    lenderBorrowedAccount : AccountKey
    lenderInterestAccount : AccountKey
  where
    signatory operator, provider, customer

    key (operator, provider, dealId) : (Party, Party, Id)
    maintainer key._1

    interface instance Removable.I for BorrowAgreement where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance BorrowAgreement.I for BorrowAgreement where
      view = BorrowAgreement.View with operator; provider; customer; dealId; description; borrowed; maturity; interest; collateral; collateralCid; lenderBorrowedAccount; lenderInterestAccount

      asRemovable = toInterface @Removable.I this

      repay BorrowAgreement.Repay{borrowedCid; interestCid} = do
        borrowedCid <- exercise borrowedCid Transferable.Transfer with actors = singleton customer; newOwnerAccount = lenderBorrowedAccount
        interestCid <- exercise interestCid Transferable.Transfer with actors = singleton customer; newOwnerAccount = lenderInterestAccount
        unlockedCid <- coerceContractId <$> exercise (toInterfaceContractId collateralCid : ContractId Holding.I) Holding.Release with context = show dealId
        Account.exerciseInterfaceByKey @Disclosure.I lenderBorrowedAccount provider Disclosure.RemoveObservers with disclosers = singleton customer; observersToRemove = (show dealId, singleton customer)
        Account.exerciseInterfaceByKey @Disclosure.I lenderInterestAccount provider Disclosure.RemoveObservers with disclosers = singleton customer; observersToRemove = (show dealId, singleton customer)
        pure (unlockedCid, borrowedCid, interestCid)
