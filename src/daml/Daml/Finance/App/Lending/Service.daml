-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Lending.Service where

import DA.Set (singleton)
import Daml.Finance.App.Interface.Base.Service qualified as Base (I, View(..))
import Daml.Finance.App.Interface.Common.Util (fetchAndRemove)
import Daml.Finance.App.Interface.Lending.BorrowOffer qualified as BorrowOffer (View(..))
import Daml.Finance.App.Interface.Lending.BorrowOfferRequest qualified as BorrowOfferRequest (View(..))
import Daml.Finance.App.Interface.Lending.Service qualified as Service (AcceptBorrowOffer(..), CreateBorrowOffer(..), HasImplementation, I, RequestBorrowOffer(..), View(..))
import Daml.Finance.App.Lending.Model qualified as Model (BorrowAgreement(..), BorrowOffer(..), BorrowOfferRequest(..))
import Daml.Finance.Interface.Account.Account qualified as Account (exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Holding.Base qualified as Holding (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, AddObservers(..))

type T = Service

instance Service.HasImplementation Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    interface instance Base.I for Service where
      view = Base.View with operator; provider; customer
      terminate = pure ()

    interface instance Service.I for Service where
      view = Service.View

      asBase = toInterface @Base.I this

      requestBorrowOffer Service.RequestBorrowOffer{dealId; description; borrowed; maturity} = do
        toInterfaceContractId <$> create Model.BorrowOfferRequest with operator; provider; customer; dealId; description; borrowed; maturity

      acceptBorrowOffer Service.AcceptBorrowOffer{borrowOfferCid; collateralCid; account} = do
        BorrowOffer.View{operator; provider; customer; dealId; description; borrowed; maturity; interest; collateral; borrowedCid; lenderBorrowedAccount; lenderInterestAccount} <- view <$> fetchAndRemove borrowOfferCid
        unlockedBorrowedCid <- exercise (coerceContractId borrowedCid : ContractId Holding.I) Holding.Release with context = show dealId
        transferredCid <- exercise (coerceContractId unlockedBorrowedCid : ContractId Transferable.I) Transferable.Transfer with actors = singleton customer; newOwnerAccount = account
        lockedCollateralCid : ContractId Transferable.I <- coerceContractId <$> exercise (toInterfaceContractId collateralCid : ContractId Holding.I) Holding.Acquire with newLockers = (singleton provider); context = show dealId; lockType = Holding.Semaphore
        borrowAgreementCid <- toInterfaceContractId <$> create Model.BorrowAgreement with operator; provider; customer; dealId; description; borrowed; maturity; interest; collateral; collateralCid = lockedCollateralCid; lenderBorrowedAccount; lenderInterestAccount
        pure (transferredCid, borrowAgreementCid)

      createBorrowOffer Service.CreateBorrowOffer{borrowOfferRequestCid; interest; collateral; borrowedCid; lenderBorrowedAccount; lenderInterestAccount} = do
        BorrowOfferRequest.View{operator; provider; customer; dealId; description; borrowed; maturity} <- view <$> fetchAndRemove borrowOfferRequestCid
        Account.exerciseInterfaceByKey @Disclosure.I lenderBorrowedAccount customer Disclosure.AddObservers with disclosers = singleton provider; observersToAdd = (show dealId, singleton customer)
        Account.exerciseInterfaceByKey @Disclosure.I lenderInterestAccount customer Disclosure.AddObservers with disclosers = singleton provider; observersToAdd = (show dealId, singleton customer)
        lockedBorrowedCid : ContractId Transferable.I <- coerceContractId <$> exercise (toInterfaceContractId borrowedCid : ContractId Holding.I) Holding.Acquire with newLockers = (singleton customer); context = show dealId; lockType = Holding.Semaphore
        toInterfaceContractId <$> create Model.BorrowOffer with operator; provider; customer; dealId; description; borrowed; maturity; interest; collateral; borrowedCid = lockedBorrowedCid; lenderBorrowedAccount; lenderInterestAccount

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with operator; provider; customer

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with operator; provider; customer
